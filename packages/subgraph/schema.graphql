"""
CHIMERA DEVMATCH SUBGRAPH SCHEMA
Decentralized AI Marketplace Analytics & Rankings

Core Features:
- Real-time product rankings via transparent algorithm
- Gasless transaction tracking and analytics  
- Chainlink Functions execution monitoring
- TEE-protected model usage statistics
- Creator performance metrics
"""

"""
Product Entity - Core marketplace item

Represents an AI model, MCP, or trading bot listed on the marketplace.
Includes comprehensive analytics and ranking data.

Ranking Algorithm: score = (totalStaked / 1e18) + (loves * 0.1)
"""
type Product @entity {
  "Unique product identifier from smart contract"
  id: ID!
  "Human-readable name of the AI model/service"
  name: String!
  "Total ETH staked on this product (for rankings)"
  totalStaked: BigInt!
  "Number of user loves (social engagement metric)"
  loves: Int!
  "Product category: AI Agent, MCP, Copy Trading Bot"
  category: String!
  
  "Address of the product creator"
  creator: Bytes!
  "Detailed description of functionality"
  description: String
  "Price in wei for using this product"
  price: BigInt!
  "Whether the product is available for use"
  active: Boolean!
  "Block timestamp when product was listed"
  createdAt: BigInt!
  
  "Calculated ranking score using transparent algorithm"
  rankingScore: BigDecimal!
  
  "All stakes made on this product"
  stakes: [Stake!]! @derivedFrom(field: "product")
  "All loves received by this product"
  productLoves: [Love!]! @derivedFrom(field: "product")
  "All model executions for this product"
  executions: [ModelExecution!]! @derivedFrom(field: "product")
}

# ✅ REQUIRED ENTITY #2: Stake (EXACT fields as specified)
type Stake @entity {
  id: ID! # Unique stake identifier (EXACT)
  product: Product! # Reference to product (EXACT)
  user: Bytes! # Address of the staker (EXACT)
  amount: BigInt! # Amount staked in wei (EXACT)
  
  # Additional fields for analytics
  timestamp: BigInt! # Block timestamp
  blockNumber: BigInt! # Block number
  transactionHash: Bytes! # Transaction hash
}

# ✅ REQUIRED ENTITY #3: Love (EXACT fields as specified)
type Love @entity {
  id: ID! # Unique love identifier (EXACT)
  product: Product! # Reference to product (EXACT)
  user: Bytes! # Address of the lover (EXACT)
  
  # Additional fields for analytics
  timestamp: BigInt! # Block timestamp
  blockNumber: BigInt! # Block number
  transactionHash: Bytes! # Transaction hash
}

type Creator @entity {
  id: ID! # Creator address
  address: Bytes!
  totalProducts: Int! # Number of products created
  totalStaked: BigInt! # Total staked across all products
  totalLoves: Int! # Total loves across all products
  
  # Relationships
  products: [Product!]! @derivedFrom(field: "creator")
}

type DailyStats @entity {
  id: ID! # Date string (YYYY-MM-DD)
  date: String!
  totalProducts: Int!
  totalStaked: BigInt!
  totalLoves: Int!
  newProducts: Int!
  newStakes: Int!
  newLoves: Int!
}

# ✅ CHAINLINK FUNCTIONS MODEL EXECUTION TRACKING
type ModelExecution @entity {
  id: ID! # Request ID from Chainlink Functions
  product: Product! # Reference to product
  user: Bytes! # User who executed model
  input: String! # Input/prompt provided
  result: String # Result from AI model (null until fulfilled)
  requestId: Bytes! # Chainlink request ID
  fulfilled: Boolean! # Whether result has been received
  
  # Timestamps
  requestedAt: BigInt! # Block timestamp of request
  fulfilledAt: BigInt # Block timestamp of fulfillment
  
  # Transaction details
  requestTxHash: Bytes! # Transaction hash of request
  fulfillTxHash: Bytes # Transaction hash of fulfillment
  
  # Execution metadata
  gasUsed: BigInt # Gas used for execution
  executionTime: BigInt # Time taken (fulfilledAt - requestedAt)
}

# ✅ ENHANCED PRODUCT ANALYTICS
type ProductAnalytics @entity {
  id: ID! # Product ID
  product: Product!
  
  # Execution statistics
  totalExecutions: Int! # Total model executions
  totalExecutionGas: BigInt! # Total gas used for executions
  averageExecutionTime: BigInt! # Average execution time
  lastExecutionAt: BigInt # Last execution timestamp
  
  # Performance metrics
  successRate: BigDecimal! # Successful executions / total executions
  averageResultLength: Int! # Average length of results
  uniqueUsers: Int! # Number of unique users
  
  # Rankings enhanced with execution data
  executionBoost: BigDecimal! # Bonus score from executions
  enhancedRankingScore: BigDecimal! # Original score + execution boost
}

# Global statistics
type GlobalStats @entity {
  id: ID! # Always "global"
  totalProducts: Int!
  totalCreators: Int!
  totalStaked: BigInt!
  totalLoves: Int!
  totalExecutions: Int! # Total Chainlink Functions executions
  totalExecutionGas: BigInt! # Total gas used for executions
  lastUpdatedBlock: BigInt!
}