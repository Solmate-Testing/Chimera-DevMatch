// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title IDataVerifier Interface
 * @notice Interface for data verification systems supporting different proof mechanisms
 * @dev Supports both TEE and ZKP verification methods for ERC-7857 AI Agent NFTs
 */
interface IDataVerifier {
    /**
     * @dev Output structure for ownership proof verification
     * @param dataHashes Array of validated data hashes from the proof
     * @param isValid Whether the ownership proof is valid
     */
    struct OwnershipProofOutput {
        bytes32[] dataHashes;
        bool isValid;
    }

    /**
     * @dev Output structure for transfer validity proof verification
     * @param oldDataHashes Array of original data hashes before transfer
     * @param newDataHashes Array of new data hashes after re-encryption
     * @param pubKey Public key of the recipient for secure key transfer
     * @param sealedKey Encrypted key sealed for the recipient
     * @param isValid Whether the transfer validity proof is valid
     */
    struct TransferValidityProofOutput {
        bytes32[] oldDataHashes;
        bytes32[] newDataHashes;
        bytes pubKey;
        bytes sealedKey;
        bool isValid;
    }

    /**
     * @notice Verify ownership of data through cryptographic proof
     * @dev Verifies that the prover possesses the original data by demonstrating 
     *      knowledge of pre-images that generate the claimed dataHashes
     * @param _proof Cryptographic proof generated by companion prover system
     * @return OwnershipProofOutput containing verification result and validated data hashes
     */
    function verifyOwnership(
        bytes calldata _proof
    ) external returns (OwnershipProofOutput memory);

    /**
     * @notice Verify validity of data transfer operation
     * @dev Verifies secure data integrity and availability by proving:
     *      - Knowledge of original data (pre-images of oldDataHashes)
     *      - Ability to decrypt with oldKey and re-encrypt with newKey
     *      - Secure transmission of newKey using recipient's public key
     *      - Integrity of newly encrypted data matching newDataHashes
     *      - Data availability confirmed by recipient's signature
     * @param _proof Cryptographic proof generated by companion prover system
     * @return TransferValidityProofOutput containing verification result and transfer details
     */
    function verifyTransferValidity(
        bytes calldata _proof
    ) external returns (TransferValidityProofOutput memory);
}