/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  OasisTEEVerifier,
  OasisTEEVerifierInterface,
} from "../../contracts/OasisTEEVerifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accessor",
        type: "address",
      },
    ],
    name: "APIKeyDecrypted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    name: "APIKeyEncrypted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "NonceUsed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proofHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "ProofVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "authorized",
        type: "bool",
      },
    ],
    name: "ROFLAuthorizationCheck",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accessor",
        type: "address",
      },
    ],
    name: "ROFLStorageAccessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "dataLength",
        type: "uint256",
      },
    ],
    name: "ROFLStorageSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    name: "addTrustedTEEKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
    ],
    name: "isNonceUsed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
    ],
    name: "markNonceUsed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "trustedTEEKeys",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "verifyOwnership",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "dataHashes",
            type: "bytes32[]",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IDataVerifier.OwnershipProofOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "verifyTransferValidity",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "oldDataHashes",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "newDataHashes",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "pubKey",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sealedKey",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IDataVerifier.TransferValidityProofOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604080516c0100000000000000000000000060208083019190915282518083036014018152603483018452805190820120600090815260058083528482208054600160ff1991821681179092556c0200000000000000000000000060548701528651808703604801815260689096018752855195850195909520835292529290922080549091169091179055610cd1806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063043153f3146100675780630e8d4ae7146100905780637cab7322146100a5578063b90665e5146100d8578063e883a3c9146100fb578063fbf8f6061461010e575b600080fd5b61007a6100753660046107b3565b61012e565b60405161008791906108a6565b60405180910390f35b6100a361009e366004610934565b610453565b005b6100c86100b3366004610934565b60056020526000908152604090205460ff1681565b6040519015158152602001610087565b6100c86100e6366004610934565b60009081526004602052604090205460ff1690565b6100a3610109366004610934565b6104c8565b61012161011c3660046107b3565b61051d565b604051610087919061094d565b6101626040518060a00160405280606081526020016060815260200160608152602001606081526020016000151581525090565b46615aff1480610173575046615afe145b156101a557610180610739565b6101a55760405162461bcd60e51b815260040161019c90610981565b60405180910390fd5b60008080808080806101b9898b018b610ae5565b965096509650965096509650965085518751146102185760405162461bcd60e51b815260206004820152601b60248201527f4861736820617272617973206c656e677468206d69736d617463680000000000604482015260640161019c565b60008751116102635760405162461bcd60e51b8152602060048201526017602482015276139bc819185d18481a185cda195cc81c1c9bdd9a591959604a1b604482015260640161019c565b60008551116102b45760405162461bcd60e51b815260206004820152601760248201527f4e6f20726563697069656e74207075626c6963206b6579000000000000000000604482015260640161019c565b60008451116102fe5760405162461bcd60e51b8152602060048201526016602482015275139bc81cd9585b1959081ad95e481c1c9bdd9a59195960521b604482015260640161019c565b60008281526004602052604090205460ff161561032d5760405162461bcd60e51b815260040161019c90610bca565b61033961012c42610bf6565b81116103775760405162461bcd60e51b815260206004820152600d60248201526c141c9bdbd9881d1bdbc81bdb19609a1b604482015260640161019c565b60008651885114801561038b575060008851115b8015610398575060008651115b80156103a5575060008551115b80156103b2575060008451115b80156103c857506103c561012c42610bf6565b82115b9050801561041f5760405133906103e2908d908d90610c17565b6040519081900381208315158252907f3a4a33223eeacd19149239ca01db55986c99bb5d00aeee3897e514b354bd68bc9060200160405180910390a35b6040805160a08101825298895260208901979097529587019490945250506060840152501515608082015290505b92915050565b60008181526004602052604090205460ff16156104825760405162461bcd60e51b815260040161019c90610bca565b600081815260046020526040808220805460ff1916600117905551339183917fabaa20a7409f654576020b2eb2bd09961d12bb1b297018ebbf8310528d4127339190a350565b46615aff14806104d9575046615afe145b15610502576104e6610739565b6105025760405162461bcd60e51b815260040161019c90610981565b6000908152600560205260409020805460ff19166001179055565b60408051808201909152606081526000602082015246615aff1480610543575046615afe145b1561056c57610550610739565b61056c5760405162461bcd60e51b815260040161019c90610981565b600080808061057d86880188610c27565b935093509350935060008451116105d05760405162461bcd60e51b8152602060048201526017602482015276139bc819185d18481a185cda195cc81c1c9bdd9a591959604a1b604482015260640161019c565b60008351116106215760405162461bcd60e51b815260206004820152601b60248201527f4e6f20544545206174746573746174696f6e2070726f76696465640000000000604482015260640161019c565b60008281526004602052604090205460ff16156106505760405162461bcd60e51b815260040161019c90610bca565b61065c61012c42610bf6565b811161069a5760405162461bcd60e51b815260206004820152600d60248201526c141c9bdbd9881d1bdbc81bdb19609a1b604482015260640161019c565b60008085511180156106ad575060008451115b80156106c357506106c061012c42610bf6565b82115b9050801561071a5760405133906106dd908a908a90610c17565b6040519081900381208315158252907f3a4a33223eeacd19149239ca01db55986c99bb5d00aeee3897e514b354bd68bc9060200160405180910390a35b6040805180820190915294855215156020850152509195945050505050565b33600090815260026020526040812054819060ff168061076857503260009081526002602052604090205460ff165b80610771575060015b6040805133815282151560208201529192507f0f6a0f5482203131919707994262ffc1a2ac3fbc258968c4a16319baf9c14174910160405180910390a1919050565b600080602083850312156107c657600080fd5b823567ffffffffffffffff808211156107de57600080fd5b818501915085601f8301126107f257600080fd5b81358181111561080157600080fd5b86602082850101111561081357600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b8381101561085557815187529582019590820190600101610839565b509495945050505050565b6000815180845260005b818110156108865760208185018101518683018201520161086a565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160a060208401526108c260c0840182610825565b90506020840151601f19808584030160408601526108e08383610825565b925060408601519150808584030160608601526108fd8383610860565b925060608601519150808584030160808601525061091b8282610860565b9150506080840151151560a08401528091505092915050565b60006020828403121561094657600080fd5b5035919050565b6020815260008251604060208401526109696060840182610825565b90506020840151151560408401528091505092915050565b6020808252601390820152724d757374206578656375746520696e2054454560681b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109ed576109ed6109ae565b604052919050565b600082601f830112610a0657600080fd5b8135602067ffffffffffffffff821115610a2257610a226109ae565b8160051b610a318282016109c4565b9283528481018201928281019087851115610a4b57600080fd5b83870192505b84831015610a6a57823582529183019190830190610a51565b979650505050505050565b600082601f830112610a8657600080fd5b813567ffffffffffffffff811115610aa057610aa06109ae565b610ab3601f8201601f19166020016109c4565b818152846020838601011115610ac857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a031215610b0057600080fd5b873567ffffffffffffffff80821115610b1857600080fd5b610b248b838c016109f5565b985060208a0135915080821115610b3a57600080fd5b610b468b838c016109f5565b975060408a0135915080821115610b5c57600080fd5b610b688b838c01610a75565b965060608a0135915080821115610b7e57600080fd5b610b8a8b838c01610a75565b955060808a0135915080821115610ba057600080fd5b50610bad8a828b01610a75565b93505060a0880135915060c0880135905092959891949750929550565b602080825260129082015271139bdb98d948185b1c9958591e481d5cd95960721b604082015260600190565b8181038181111561044d57634e487b7160e01b600052601160045260246000fd5b8183823760009101908152919050565b60008060008060808587031215610c3d57600080fd5b843567ffffffffffffffff80821115610c5557600080fd5b610c61888389016109f5565b95506020870135915080821115610c7757600080fd5b50610c8487828801610a75565b94979496505050506040830135926060013591905056fea26469706673582212201a8e82b6f052e7ea341cc1e49e0c657af7775132508f5d70ef12a73f5d72385c64736f6c63430008140033";

type OasisTEEVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OasisTEEVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OasisTEEVerifier__factory extends ContractFactory {
  constructor(...args: OasisTEEVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OasisTEEVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OasisTEEVerifier__factory {
    return super.connect(runner) as OasisTEEVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OasisTEEVerifierInterface {
    return new Interface(_abi) as OasisTEEVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OasisTEEVerifier {
    return new Contract(address, _abi, runner) as unknown as OasisTEEVerifier;
  }
}
