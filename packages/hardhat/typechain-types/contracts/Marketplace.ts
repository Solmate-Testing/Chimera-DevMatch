/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Marketplace {
  export type AgentStruct = {
    id: BigNumberish;
    creator: AddressLike;
    name: string;
    description: string;
    tags: string[];
    ipfsHash: string;
    totalStake: BigNumberish;
    isPrivate: boolean;
    createdAt: BigNumberish;
    apiKeyHash: BytesLike;
    loves: BigNumberish;
  };

  export type AgentStructOutput = [
    id: bigint,
    creator: string,
    name: string,
    description: string,
    tags: string[],
    ipfsHash: string,
    totalStake: bigint,
    isPrivate: boolean,
    createdAt: bigint,
    apiKeyHash: string,
    loves: bigint
  ] & {
    id: bigint;
    creator: string;
    name: string;
    description: string;
    tags: string[];
    ipfsHash: string;
    totalStake: bigint;
    isPrivate: boolean;
    createdAt: bigint;
    apiKeyHash: string;
    loves: bigint;
  };

  export type ProductStruct = {
    id: BigNumberish;
    creator: AddressLike;
    name: string;
    description: string;
    price: BigNumberish;
    category: string;
    active: boolean;
    createdAt: BigNumberish;
    apiKeyHash: BytesLike;
    totalStaked: BigNumberish;
    loves: BigNumberish;
  };

  export type ProductStructOutput = [
    id: bigint,
    creator: string,
    name: string,
    description: string,
    price: bigint,
    category: string,
    active: boolean,
    createdAt: bigint,
    apiKeyHash: string,
    totalStaked: bigint,
    loves: bigint
  ] & {
    id: bigint;
    creator: string;
    name: string;
    description: string;
    price: bigint;
    category: string;
    active: boolean;
    createdAt: bigint;
    apiKeyHash: string;
    totalStaked: bigint;
    loves: bigint;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "MIN_STAKE"
      | "agentAccess"
      | "agentStakes"
      | "agents"
      | "createAgent"
      | "creatorAgents"
      | "creatorProducts"
      | "donId"
      | "gasLimit"
      | "getAgent"
      | "getAgentCount"
      | "getAllAgents"
      | "getCreatorAgents"
      | "getCreatorProducts"
      | "getExecutionCount"
      | "getLastResult"
      | "getProduct"
      | "getProductCount"
      | "getUserAgentStake"
      | "getUserStake"
      | "grantAgentAccess"
      | "handleOracleFulfillment"
      | "hasAgentAccess"
      | "listProduct"
      | "loveAgent"
      | "loveProduct"
      | "owner"
      | "platformFee"
      | "productExecutionCount"
      | "productLastResult"
      | "products"
      | "purchaseProduct"
      | "renounceOwnership"
      | "requestToProductId"
      | "requestToUser"
      | "rotateApiKey"
      | "runModel"
      | "setChainlinkConfig"
      | "setPlatformFee"
      | "source"
      | "stakeOnProduct"
      | "stakeToAgent"
      | "stakes"
      | "subscriptionId"
      | "transferOwnership"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "APIKeyDecrypted"
      | "APIKeyEncrypted"
      | "AgentAccessGranted"
      | "AgentCreated"
      | "AgentLoved"
      | "AgentStaked"
      | "ModelExecutionRequested"
      | "ModelResultReceived"
      | "OwnershipTransferred"
      | "ProductListed"
      | "ProductLoved"
      | "ProductPurchased"
      | "ROFLAuthorizationCheck"
      | "ROFLStorageAccessed"
      | "ROFLStorageSet"
      | "RequestFulfilled"
      | "RequestSent"
      | "StakeAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_STAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "agentAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agentStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgent",
    values: [string, string, string[], string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAgents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorProducts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorProducts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAgentStake",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAgentAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAgentAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listProduct",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loveAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loveProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productExecutionCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productLastResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestToProductId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateApiKey",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runModel",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkConfig",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "source", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeOnProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_STAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAgentStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAgentAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAgentAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loveAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loveProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productExecutionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productLastResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rotateApiKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runModel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "source", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOnProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace APIKeyDecryptedEvent {
  export type InputTuple = [keyHash: BytesLike, accessor: AddressLike];
  export type OutputTuple = [keyHash: string, accessor: string];
  export interface OutputObject {
    keyHash: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace APIKeyEncryptedEvent {
  export type InputTuple = [keyHash: BytesLike];
  export type OutputTuple = [keyHash: string];
  export interface OutputObject {
    keyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentAccessGrantedEvent {
  export type InputTuple = [id: BigNumberish, user: AddressLike];
  export type OutputTuple = [id: bigint, user: string];
  export interface OutputObject {
    id: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    creator: AddressLike
  ];
  export type OutputTuple = [id: bigint, name: string, creator: string];
  export interface OutputObject {
    id: bigint;
    name: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentLovedEvent {
  export type InputTuple = [id: BigNumberish, user: AddressLike];
  export type OutputTuple = [id: bigint, user: string];
  export interface OutputObject {
    id: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentStakedEvent {
  export type InputTuple = [
    id: BigNumberish,
    staker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, staker: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModelExecutionRequestedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    user: AddressLike,
    requestId: BytesLike,
    input: string
  ];
  export type OutputTuple = [
    productId: bigint,
    user: string,
    requestId: string,
    input: string
  ];
  export interface OutputObject {
    productId: bigint;
    user: string;
    requestId: string;
    input: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModelResultReceivedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    user: AddressLike,
    requestId: BytesLike,
    result: string
  ];
  export type OutputTuple = [
    productId: bigint,
    user: string,
    requestId: string,
    result: string
  ];
  export interface OutputObject {
    productId: bigint;
    user: string;
    requestId: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductListedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    name: string,
    price: BigNumberish,
    category: string
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    name: string,
    price: bigint,
    category: string
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    name: string;
    price: bigint;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductLovedEvent {
  export type InputTuple = [productId: BigNumberish, user: AddressLike];
  export type OutputTuple = [productId: bigint, user: string];
  export interface OutputObject {
    productId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    id: BigNumberish,
    buyer: AddressLike,
    creator: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    buyer: string,
    creator: string,
    price: bigint
  ];
  export interface OutputObject {
    id: bigint;
    buyer: string;
    creator: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLAuthorizationCheckEvent {
  export type InputTuple = [origin: AddressLike, authorized: boolean];
  export type OutputTuple = [origin: string, authorized: boolean];
  export interface OutputObject {
    origin: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageAccessedEvent {
  export type InputTuple = [key: BytesLike, accessor: AddressLike];
  export type OutputTuple = [key: string, accessor: string];
  export interface OutputObject {
    key: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageSetEvent {
  export type InputTuple = [key: BytesLike, dataLength: BigNumberish];
  export type OutputTuple = [key: string, dataLength: bigint];
  export interface OutputObject {
    key: string;
    dataLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [productId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    productId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE: TypedContractMethod<[], [bigint], "view">;

  agentAccess: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  agentStakes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  agents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        ipfsHash: string;
        totalStake: bigint;
        isPrivate: boolean;
        createdAt: bigint;
        apiKeyHash: string;
        loves: bigint;
      }
    ],
    "view"
  >;

  createAgent: TypedContractMethod<
    [
      name: string,
      description: string,
      tags: string[],
      ipfsHash: string,
      encryptedApiKey: BytesLike,
      isPrivate: boolean
    ],
    [void],
    "nonpayable"
  >;

  creatorAgents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  creatorProducts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  donId: TypedContractMethod<[], [string], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getAgent: TypedContractMethod<
    [agentId: BigNumberish],
    [Marketplace.AgentStructOutput],
    "view"
  >;

  getAgentCount: TypedContractMethod<[], [bigint], "view">;

  getAllAgents: TypedContractMethod<
    [],
    [Marketplace.AgentStructOutput[]],
    "view"
  >;

  getCreatorAgents: TypedContractMethod<
    [creator: AddressLike],
    [bigint[]],
    "view"
  >;

  getCreatorProducts: TypedContractMethod<
    [_creator: AddressLike],
    [bigint[]],
    "view"
  >;

  getExecutionCount: TypedContractMethod<
    [_productId: BigNumberish],
    [bigint],
    "view"
  >;

  getLastResult: TypedContractMethod<
    [_productId: BigNumberish],
    [string],
    "view"
  >;

  getProduct: TypedContractMethod<
    [_id: BigNumberish],
    [Marketplace.ProductStructOutput],
    "view"
  >;

  getProductCount: TypedContractMethod<[], [bigint], "view">;

  getUserAgentStake: TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getUserStake: TypedContractMethod<
    [_productId: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  grantAgentAccess: TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  hasAgentAccess: TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  listProduct: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _category: string,
      _encryptedApiKey: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  loveAgent: TypedContractMethod<[agentId: BigNumberish], [void], "nonpayable">;

  loveProduct: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  productExecutionCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  productLastResult: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        price: bigint;
        category: string;
        active: boolean;
        createdAt: bigint;
        apiKeyHash: string;
        totalStaked: bigint;
        loves: bigint;
      }
    ],
    "view"
  >;

  purchaseProduct: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestToProductId: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  requestToUser: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  rotateApiKey: TypedContractMethod<
    [_productId: BigNumberish, _newEncryptedApiKey: BytesLike],
    [void],
    "nonpayable"
  >;

  runModel: TypedContractMethod<
    [_productId: BigNumberish, _input: string],
    [string],
    "nonpayable"
  >;

  setChainlinkConfig: TypedContractMethod<
    [_donId: BytesLike, _subscriptionId: BigNumberish, _source: string],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  source: TypedContractMethod<[], [string], "view">;

  stakeOnProduct: TypedContractMethod<
    [_productId: BigNumberish],
    [void],
    "payable"
  >;

  stakeToAgent: TypedContractMethod<[agentId: BigNumberish], [void], "payable">;

  stakes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agentAccess"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "agentStakes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "agents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        ipfsHash: string;
        totalStake: bigint;
        isPrivate: boolean;
        createdAt: bigint;
        apiKeyHash: string;
        loves: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAgent"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      tags: string[],
      ipfsHash: string,
      encryptedApiKey: BytesLike,
      isPrivate: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorAgents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "creatorProducts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "donId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgent"
  ): TypedContractMethod<
    [agentId: BigNumberish],
    [Marketplace.AgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllAgents"
  ): TypedContractMethod<[], [Marketplace.AgentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorAgents"
  ): TypedContractMethod<[creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorProducts"
  ): TypedContractMethod<[_creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getExecutionCount"
  ): TypedContractMethod<[_productId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastResult"
  ): TypedContractMethod<[_productId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Marketplace.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAgentStake"
  ): TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStake"
  ): TypedContractMethod<
    [_productId: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAgentAccess"
  ): TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAgentAccess"
  ): TypedContractMethod<
    [agentId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listProduct"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _category: string,
      _encryptedApiKey: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "loveAgent"
  ): TypedContractMethod<[agentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loveProduct"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "productExecutionCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "productLastResult"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        description: string;
        price: bigint;
        category: string;
        active: boolean;
        createdAt: bigint;
        apiKeyHash: string;
        totalStaked: bigint;
        loves: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseProduct"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestToProductId"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestToUser"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "rotateApiKey"
  ): TypedContractMethod<
    [_productId: BigNumberish, _newEncryptedApiKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runModel"
  ): TypedContractMethod<
    [_productId: BigNumberish, _input: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChainlinkConfig"
  ): TypedContractMethod<
    [_donId: BytesLike, _subscriptionId: BigNumberish, _source: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "source"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakeOnProduct"
  ): TypedContractMethod<[_productId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "stakeToAgent"
  ): TypedContractMethod<[agentId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "APIKeyDecrypted"
  ): TypedContractEvent<
    APIKeyDecryptedEvent.InputTuple,
    APIKeyDecryptedEvent.OutputTuple,
    APIKeyDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "APIKeyEncrypted"
  ): TypedContractEvent<
    APIKeyEncryptedEvent.InputTuple,
    APIKeyEncryptedEvent.OutputTuple,
    APIKeyEncryptedEvent.OutputObject
  >;
  getEvent(
    key: "AgentAccessGranted"
  ): TypedContractEvent<
    AgentAccessGrantedEvent.InputTuple,
    AgentAccessGrantedEvent.OutputTuple,
    AgentAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AgentCreated"
  ): TypedContractEvent<
    AgentCreatedEvent.InputTuple,
    AgentCreatedEvent.OutputTuple,
    AgentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgentLoved"
  ): TypedContractEvent<
    AgentLovedEvent.InputTuple,
    AgentLovedEvent.OutputTuple,
    AgentLovedEvent.OutputObject
  >;
  getEvent(
    key: "AgentStaked"
  ): TypedContractEvent<
    AgentStakedEvent.InputTuple,
    AgentStakedEvent.OutputTuple,
    AgentStakedEvent.OutputObject
  >;
  getEvent(
    key: "ModelExecutionRequested"
  ): TypedContractEvent<
    ModelExecutionRequestedEvent.InputTuple,
    ModelExecutionRequestedEvent.OutputTuple,
    ModelExecutionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ModelResultReceived"
  ): TypedContractEvent<
    ModelResultReceivedEvent.InputTuple,
    ModelResultReceivedEvent.OutputTuple,
    ModelResultReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductListed"
  ): TypedContractEvent<
    ProductListedEvent.InputTuple,
    ProductListedEvent.OutputTuple,
    ProductListedEvent.OutputObject
  >;
  getEvent(
    key: "ProductLoved"
  ): TypedContractEvent<
    ProductLovedEvent.InputTuple,
    ProductLovedEvent.OutputTuple,
    ProductLovedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "ROFLAuthorizationCheck"
  ): TypedContractEvent<
    ROFLAuthorizationCheckEvent.InputTuple,
    ROFLAuthorizationCheckEvent.OutputTuple,
    ROFLAuthorizationCheckEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageAccessed"
  ): TypedContractEvent<
    ROFLStorageAccessedEvent.InputTuple,
    ROFLStorageAccessedEvent.OutputTuple,
    ROFLStorageAccessedEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageSet"
  ): TypedContractEvent<
    ROFLStorageSetEvent.InputTuple,
    ROFLStorageSetEvent.OutputTuple,
    ROFLStorageSetEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "StakeAdded"
  ): TypedContractEvent<
    StakeAddedEvent.InputTuple,
    StakeAddedEvent.OutputTuple,
    StakeAddedEvent.OutputObject
  >;

  filters: {
    "APIKeyDecrypted(bytes32,address)": TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;
    APIKeyDecrypted: TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;

    "APIKeyEncrypted(bytes32)": TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;
    APIKeyEncrypted: TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;

    "AgentAccessGranted(uint256,address)": TypedContractEvent<
      AgentAccessGrantedEvent.InputTuple,
      AgentAccessGrantedEvent.OutputTuple,
      AgentAccessGrantedEvent.OutputObject
    >;
    AgentAccessGranted: TypedContractEvent<
      AgentAccessGrantedEvent.InputTuple,
      AgentAccessGrantedEvent.OutputTuple,
      AgentAccessGrantedEvent.OutputObject
    >;

    "AgentCreated(uint256,string,address)": TypedContractEvent<
      AgentCreatedEvent.InputTuple,
      AgentCreatedEvent.OutputTuple,
      AgentCreatedEvent.OutputObject
    >;
    AgentCreated: TypedContractEvent<
      AgentCreatedEvent.InputTuple,
      AgentCreatedEvent.OutputTuple,
      AgentCreatedEvent.OutputObject
    >;

    "AgentLoved(uint256,address)": TypedContractEvent<
      AgentLovedEvent.InputTuple,
      AgentLovedEvent.OutputTuple,
      AgentLovedEvent.OutputObject
    >;
    AgentLoved: TypedContractEvent<
      AgentLovedEvent.InputTuple,
      AgentLovedEvent.OutputTuple,
      AgentLovedEvent.OutputObject
    >;

    "AgentStaked(uint256,address,uint256)": TypedContractEvent<
      AgentStakedEvent.InputTuple,
      AgentStakedEvent.OutputTuple,
      AgentStakedEvent.OutputObject
    >;
    AgentStaked: TypedContractEvent<
      AgentStakedEvent.InputTuple,
      AgentStakedEvent.OutputTuple,
      AgentStakedEvent.OutputObject
    >;

    "ModelExecutionRequested(uint256,address,bytes32,string)": TypedContractEvent<
      ModelExecutionRequestedEvent.InputTuple,
      ModelExecutionRequestedEvent.OutputTuple,
      ModelExecutionRequestedEvent.OutputObject
    >;
    ModelExecutionRequested: TypedContractEvent<
      ModelExecutionRequestedEvent.InputTuple,
      ModelExecutionRequestedEvent.OutputTuple,
      ModelExecutionRequestedEvent.OutputObject
    >;

    "ModelResultReceived(uint256,address,bytes32,string)": TypedContractEvent<
      ModelResultReceivedEvent.InputTuple,
      ModelResultReceivedEvent.OutputTuple,
      ModelResultReceivedEvent.OutputObject
    >;
    ModelResultReceived: TypedContractEvent<
      ModelResultReceivedEvent.InputTuple,
      ModelResultReceivedEvent.OutputTuple,
      ModelResultReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductListed(uint256,address,string,uint256,string)": TypedContractEvent<
      ProductListedEvent.InputTuple,
      ProductListedEvent.OutputTuple,
      ProductListedEvent.OutputObject
    >;
    ProductListed: TypedContractEvent<
      ProductListedEvent.InputTuple,
      ProductListedEvent.OutputTuple,
      ProductListedEvent.OutputObject
    >;

    "ProductLoved(uint256,address)": TypedContractEvent<
      ProductLovedEvent.InputTuple,
      ProductLovedEvent.OutputTuple,
      ProductLovedEvent.OutputObject
    >;
    ProductLoved: TypedContractEvent<
      ProductLovedEvent.InputTuple,
      ProductLovedEvent.OutputTuple,
      ProductLovedEvent.OutputObject
    >;

    "ProductPurchased(uint256,address,address,uint256)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;

    "ROFLAuthorizationCheck(address,bool)": TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;
    ROFLAuthorizationCheck: TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;

    "ROFLStorageAccessed(bytes32,address)": TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;
    ROFLStorageAccessed: TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;

    "ROFLStorageSet(bytes32,uint256)": TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;
    ROFLStorageSet: TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "StakeAdded(uint256,address,uint256)": TypedContractEvent<
      StakeAddedEvent.InputTuple,
      StakeAddedEvent.OutputTuple,
      StakeAddedEvent.OutputObject
    >;
    StakeAdded: TypedContractEvent<
      StakeAddedEvent.InputTuple,
      StakeAddedEvent.OutputTuple,
      StakeAddedEvent.OutputObject
    >;
  };
}
