/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EnhancedMarketplace {
  export type CreatorStatsStruct = {
    totalAgentsCreated: BigNumberish;
    totalSales: BigNumberish;
    totalVolume: BigNumberish;
    totalRoyaltiesEarned: BigNumberish;
    currentTier: BigNumberish;
    lastTierUpdate: BigNumberish;
  };

  export type CreatorStatsStructOutput = [
    totalAgentsCreated: bigint,
    totalSales: bigint,
    totalVolume: bigint,
    totalRoyaltiesEarned: bigint,
    currentTier: bigint,
    lastTierUpdate: bigint
  ] & {
    totalAgentsCreated: bigint;
    totalSales: bigint;
    totalVolume: bigint;
    totalRoyaltiesEarned: bigint;
    currentTier: bigint;
    lastTierUpdate: bigint;
  };

  export type ListingStruct = {
    listingId: BigNumberish;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    originalCreator: AddressLike;
    price: BigNumberish;
    active: boolean;
    listedAt: BigNumberish;
    expiresAt: BigNumberish;
    isAuction: boolean;
    highestBid: BigNumberish;
    highestBidder: AddressLike;
    auctionEndTime: BigNumberish;
  };

  export type ListingStructOutput = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    originalCreator: string,
    price: bigint,
    active: boolean,
    listedAt: bigint,
    expiresAt: bigint,
    isAuction: boolean,
    highestBid: bigint,
    highestBidder: string,
    auctionEndTime: bigint
  ] & {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    originalCreator: string;
    price: bigint;
    active: boolean;
    listedAt: bigint;
    expiresAt: bigint;
    isAuction: boolean;
    highestBid: bigint;
    highestBidder: string;
    auctionEndTime: bigint;
  };

  export type OfferStruct = {
    offerId: BigNumberish;
    listingId: BigNumberish;
    offerer: AddressLike;
    amount: BigNumberish;
    expiresAt: BigNumberish;
    active: boolean;
  };

  export type OfferStructOutput = [
    offerId: bigint,
    listingId: bigint,
    offerer: string,
    amount: bigint,
    expiresAt: bigint,
    active: boolean
  ] & {
    offerId: bigint;
    listingId: bigint;
    offerer: string;
    amount: bigint;
    expiresAt: bigint;
    active: boolean;
  };
}

export interface EnhancedMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOffer"
      | "buyNFT"
      | "cancelListing"
      | "creatorEarnings"
      | "creatorListings"
      | "creatorStats"
      | "endAuction"
      | "feeConfig"
      | "getCreatorFee"
      | "getCreatorListings"
      | "getCreatorStats"
      | "getCreatorTier"
      | "getListing"
      | "getOffer"
      | "getUserOffers"
      | "listNFT"
      | "listings"
      | "makeOffer"
      | "offers"
      | "onERC721Received"
      | "owner"
      | "placeBid"
      | "platformEarnings"
      | "renounceOwnership"
      | "totalPlatformFees"
      | "totalRoyaltiesPaid"
      | "transferOwnership"
      | "treasury"
      | "updateFeeConfig"
      | "updateTreasury"
      | "userOffers"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "APIKeyDecrypted"
      | "APIKeyEncrypted"
      | "AuctionBid"
      | "AuctionEnded"
      | "CreatorTierUpdated"
      | "ListingCancelled"
      | "ListingCreated"
      | "NFTPurchased"
      | "OfferAccepted"
      | "OfferMade"
      | "OwnershipTransferred"
      | "ROFLAuthorizationCheck"
      | "ROFLStorageAccessed"
      | "ROFLStorageSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorListings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCreatorFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOffers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlatformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoyaltiesPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOffers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRoyaltiesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace APIKeyDecryptedEvent {
  export type InputTuple = [keyHash: BytesLike, accessor: AddressLike];
  export type OutputTuple = [keyHash: string, accessor: string];
  export interface OutputObject {
    keyHash: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace APIKeyEncryptedEvent {
  export type InputTuple = [keyHash: BytesLike];
  export type OutputTuple = [keyHash: string];
  export interface OutputObject {
    keyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionBidEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    bidder: AddressLike,
    bidAmount: BigNumberish,
    auctionEndTime: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    bidder: string,
    bidAmount: bigint,
    auctionEndTime: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    bidder: string;
    bidAmount: bigint;
    auctionEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    winner: AddressLike,
    winningBid: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    winner: string,
    winningBid: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    winner: string;
    winningBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatorTierUpdatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    oldTier: BigNumberish,
    newTier: BigNumberish,
    agentCount: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    oldTier: bigint,
    newTier: bigint,
    agentCount: bigint
  ];
  export interface OutputObject {
    creator: string;
    oldTier: bigint;
    newTier: bigint;
    agentCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [listingId: BigNumberish, seller: AddressLike];
  export type OutputTuple = [listingId: bigint, seller: string];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish,
    isAuction: boolean
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    isAuction: boolean
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    isAuction: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTPurchasedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish,
    platformFee: BigNumberish,
    royalty: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    buyer: string,
    seller: string,
    price: bigint,
    platformFee: bigint,
    royalty: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    buyer: string;
    seller: string;
    price: bigint;
    platformFee: bigint;
    royalty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferAcceptedEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    listingId: BigNumberish,
    offerer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    offerId: bigint,
    listingId: bigint,
    offerer: string,
    amount: bigint
  ];
  export interface OutputObject {
    offerId: bigint;
    listingId: bigint;
    offerer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferMadeEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    listingId: BigNumberish,
    offerer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    offerId: bigint,
    listingId: bigint,
    offerer: string,
    amount: bigint
  ];
  export interface OutputObject {
    offerId: bigint;
    listingId: bigint;
    offerer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLAuthorizationCheckEvent {
  export type InputTuple = [origin: AddressLike, authorized: boolean];
  export type OutputTuple = [origin: string, authorized: boolean];
  export interface OutputObject {
    origin: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageAccessedEvent {
  export type InputTuple = [key: BytesLike, accessor: AddressLike];
  export type OutputTuple = [key: string, accessor: string];
  export interface OutputObject {
    key: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageSetEvent {
  export type InputTuple = [key: BytesLike, dataLength: BigNumberish];
  export type OutputTuple = [key: string, dataLength: bigint];
  export interface OutputObject {
    key: string;
    dataLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnhancedMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): EnhancedMarketplace;
  waitForDeployment(): Promise<this>;

  interface: EnhancedMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOffer: TypedContractMethod<
    [offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyNFT: TypedContractMethod<[listingId: BigNumberish], [void], "payable">;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  creatorEarnings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  creatorListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  creatorStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAgentsCreated: bigint;
        totalSales: bigint;
        totalVolume: bigint;
        totalRoyaltiesEarned: bigint;
        currentTier: bigint;
        lastTierUpdate: bigint;
      }
    ],
    "view"
  >;

  endAuction: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        tier1Fee: bigint;
        tier2Fee: bigint;
        tier3Fee: bigint;
        royaltyFee: bigint;
        denominator: bigint;
      }
    ],
    "view"
  >;

  getCreatorFee: TypedContractMethod<[creator: AddressLike], [bigint], "view">;

  getCreatorListings: TypedContractMethod<
    [creator: AddressLike],
    [bigint[]],
    "view"
  >;

  getCreatorStats: TypedContractMethod<
    [creator: AddressLike],
    [EnhancedMarketplace.CreatorStatsStructOutput],
    "view"
  >;

  getCreatorTier: TypedContractMethod<[creator: AddressLike], [bigint], "view">;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [EnhancedMarketplace.ListingStructOutput],
    "view"
  >;

  getOffer: TypedContractMethod<
    [offerId: BigNumberish],
    [EnhancedMarketplace.OfferStructOutput],
    "view"
  >;

  getUserOffers: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  listNFT: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      originalCreator: AddressLike,
      duration: BigNumberish,
      isAuction: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        originalCreator: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
        expiresAt: bigint;
        isAuction: boolean;
        highestBid: bigint;
        highestBidder: string;
        auctionEndTime: bigint;
      }
    ],
    "view"
  >;

  makeOffer: TypedContractMethod<
    [listingId: BigNumberish, duration: BigNumberish],
    [void],
    "payable"
  >;

  offers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        offerId: bigint;
        listingId: bigint;
        offerer: string;
        amount: bigint;
        expiresAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<[listingId: BigNumberish], [void], "payable">;

  platformEarnings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalPlatformFees: TypedContractMethod<[], [bigint], "view">;

  totalRoyaltiesPaid: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateFeeConfig: TypedContractMethod<
    [
      tier1Fee: BigNumberish,
      tier2Fee: BigNumberish,
      tier3Fee: BigNumberish,
      royaltyFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  userOffers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<[offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorEarnings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "creatorStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAgentsCreated: bigint;
        totalSales: bigint;
        totalVolume: bigint;
        totalRoyaltiesEarned: bigint;
        currentTier: bigint;
        lastTierUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        tier1Fee: bigint;
        tier2Fee: bigint;
        tier3Fee: bigint;
        royaltyFee: bigint;
        denominator: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorFee"
  ): TypedContractMethod<[creator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreatorListings"
  ): TypedContractMethod<[creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorStats"
  ): TypedContractMethod<
    [creator: AddressLike],
    [EnhancedMarketplace.CreatorStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorTier"
  ): TypedContractMethod<[creator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [EnhancedMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffer"
  ): TypedContractMethod<
    [offerId: BigNumberish],
    [EnhancedMarketplace.OfferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOffers"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      originalCreator: AddressLike,
      duration: BigNumberish,
      isAuction: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        originalCreator: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
        expiresAt: bigint;
        isAuction: boolean;
        highestBid: bigint;
        highestBidder: string;
        auctionEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeOffer"
  ): TypedContractMethod<
    [listingId: BigNumberish, duration: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        offerId: bigint;
        listingId: bigint;
        offerer: string;
        amount: bigint;
        expiresAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "platformEarnings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalPlatformFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRoyaltiesPaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateFeeConfig"
  ): TypedContractMethod<
    [
      tier1Fee: BigNumberish,
      tier2Fee: BigNumberish,
      tier3Fee: BigNumberish,
      royaltyFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOffers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "APIKeyDecrypted"
  ): TypedContractEvent<
    APIKeyDecryptedEvent.InputTuple,
    APIKeyDecryptedEvent.OutputTuple,
    APIKeyDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "APIKeyEncrypted"
  ): TypedContractEvent<
    APIKeyEncryptedEvent.InputTuple,
    APIKeyEncryptedEvent.OutputTuple,
    APIKeyEncryptedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionBid"
  ): TypedContractEvent<
    AuctionBidEvent.InputTuple,
    AuctionBidEvent.OutputTuple,
    AuctionBidEvent.OutputObject
  >;
  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "CreatorTierUpdated"
  ): TypedContractEvent<
    CreatorTierUpdatedEvent.InputTuple,
    CreatorTierUpdatedEvent.OutputTuple,
    CreatorTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTPurchased"
  ): TypedContractEvent<
    NFTPurchasedEvent.InputTuple,
    NFTPurchasedEvent.OutputTuple,
    NFTPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OfferAccepted"
  ): TypedContractEvent<
    OfferAcceptedEvent.InputTuple,
    OfferAcceptedEvent.OutputTuple,
    OfferAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OfferMade"
  ): TypedContractEvent<
    OfferMadeEvent.InputTuple,
    OfferMadeEvent.OutputTuple,
    OfferMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ROFLAuthorizationCheck"
  ): TypedContractEvent<
    ROFLAuthorizationCheckEvent.InputTuple,
    ROFLAuthorizationCheckEvent.OutputTuple,
    ROFLAuthorizationCheckEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageAccessed"
  ): TypedContractEvent<
    ROFLStorageAccessedEvent.InputTuple,
    ROFLStorageAccessedEvent.OutputTuple,
    ROFLStorageAccessedEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageSet"
  ): TypedContractEvent<
    ROFLStorageSetEvent.InputTuple,
    ROFLStorageSetEvent.OutputTuple,
    ROFLStorageSetEvent.OutputObject
  >;

  filters: {
    "APIKeyDecrypted(bytes32,address)": TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;
    APIKeyDecrypted: TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;

    "APIKeyEncrypted(bytes32)": TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;
    APIKeyEncrypted: TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;

    "AuctionBid(uint256,address,uint256,uint256)": TypedContractEvent<
      AuctionBidEvent.InputTuple,
      AuctionBidEvent.OutputTuple,
      AuctionBidEvent.OutputObject
    >;
    AuctionBid: TypedContractEvent<
      AuctionBidEvent.InputTuple,
      AuctionBidEvent.OutputTuple,
      AuctionBidEvent.OutputObject
    >;

    "AuctionEnded(uint256,address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "CreatorTierUpdated(address,uint8,uint8,uint256)": TypedContractEvent<
      CreatorTierUpdatedEvent.InputTuple,
      CreatorTierUpdatedEvent.OutputTuple,
      CreatorTierUpdatedEvent.OutputObject
    >;
    CreatorTierUpdated: TypedContractEvent<
      CreatorTierUpdatedEvent.InputTuple,
      CreatorTierUpdatedEvent.OutputTuple,
      CreatorTierUpdatedEvent.OutputObject
    >;

    "ListingCancelled(uint256,address)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "ListingCreated(uint256,address,uint256,address,uint256,bool)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "NFTPurchased(uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;
    NFTPurchased: TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;

    "OfferAccepted(uint256,uint256,address,uint256)": TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;
    OfferAccepted: TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;

    "OfferMade(uint256,uint256,address,uint256)": TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;
    OfferMade: TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ROFLAuthorizationCheck(address,bool)": TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;
    ROFLAuthorizationCheck: TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;

    "ROFLStorageAccessed(bytes32,address)": TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;
    ROFLStorageAccessed: TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;

    "ROFLStorageSet(bytes32,uint256)": TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;
    ROFLStorageSet: TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;
  };
}
