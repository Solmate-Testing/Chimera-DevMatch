/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IDataVerifier {
  export type OwnershipProofOutputStruct = {
    dataHashes: BytesLike[];
    isValid: boolean;
  };

  export type OwnershipProofOutputStructOutput = [
    dataHashes: string[],
    isValid: boolean
  ] & { dataHashes: string[]; isValid: boolean };

  export type TransferValidityProofOutputStruct = {
    oldDataHashes: BytesLike[];
    newDataHashes: BytesLike[];
    pubKey: BytesLike;
    sealedKey: BytesLike;
    isValid: boolean;
  };

  export type TransferValidityProofOutputStructOutput = [
    oldDataHashes: string[],
    newDataHashes: string[],
    pubKey: string,
    sealedKey: string,
    isValid: boolean
  ] & {
    oldDataHashes: string[];
    newDataHashes: string[];
    pubKey: string;
    sealedKey: string;
    isValid: boolean;
  };
}

export interface IDataVerifierInterface extends Interface {
  getFunction(
    nameOrSignature: "verifyOwnership" | "verifyTransferValidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyOwnership",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTransferValidity",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTransferValidity",
    data: BytesLike
  ): Result;
}

export interface IDataVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IDataVerifier;
  waitForDeployment(): Promise<this>;

  interface: IDataVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyOwnership: TypedContractMethod<
    [_proof: BytesLike],
    [IDataVerifier.OwnershipProofOutputStructOutput],
    "nonpayable"
  >;

  verifyTransferValidity: TypedContractMethod<
    [_proof: BytesLike],
    [IDataVerifier.TransferValidityProofOutputStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyOwnership"
  ): TypedContractMethod<
    [_proof: BytesLike],
    [IDataVerifier.OwnershipProofOutputStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyTransferValidity"
  ): TypedContractMethod<
    [_proof: BytesLike],
    [IDataVerifier.TransferValidityProofOutputStructOutput],
    "nonpayable"
  >;

  filters: {};
}
