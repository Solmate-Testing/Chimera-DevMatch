/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IERC7857Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeUsage"
      | "clone"
      | "isAuthorized"
      | "metadataHash"
      | "mint"
      | "safeTransferFromWithProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "INFTCloned"
      | "INFTMinted"
      | "INFTTransferred"
      | "INFTUpdated"
      | "UsageAuthorized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeUsage",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clone",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFromWithProof",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFromWithProof",
    data: BytesLike
  ): Result;
}

export namespace INFTClonedEvent {
  export type InputTuple = [
    originalTokenId: BigNumberish,
    newTokenId: BigNumberish,
    cloner: AddressLike
  ];
  export type OutputTuple = [
    originalTokenId: bigint,
    newTokenId: bigint,
    cloner: string
  ];
  export interface OutputObject {
    originalTokenId: bigint;
    newTokenId: bigint;
    cloner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace INFTMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    creator: AddressLike,
    encryptedMetadataURI: string,
    metadataHash: BytesLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    creator: string,
    encryptedMetadataURI: string,
    metadataHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    creator: string;
    encryptedMetadataURI: string;
    metadataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace INFTTransferredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    transferProof: BytesLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    from: string,
    to: string,
    transferProof: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    to: string;
    transferProof: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace INFTUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    oldMetadataURI: string,
    newMetadataURI: string,
    newMetadataHash: BytesLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    oldMetadataURI: string,
    newMetadataURI: string,
    newMetadataHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    oldMetadataURI: string;
    newMetadataURI: string;
    newMetadataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsageAuthorizedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    authorizedUser: AddressLike,
    expiryTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    authorizedUser: string,
    expiryTime: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    authorizedUser: string;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC7857 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC7857;
  waitForDeployment(): Promise<this>;

  interface: IERC7857Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeUsage: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  clone: TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  isAuthorized: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  metadataHash: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, encryptedMetadataURI: string, metadataHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  safeTransferFromWithProof: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      transferProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeUsage"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clone"
  ): TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "metadataHash"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, encryptedMetadataURI: string, metadataHash: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFromWithProof"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      transferProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "INFTCloned"
  ): TypedContractEvent<
    INFTClonedEvent.InputTuple,
    INFTClonedEvent.OutputTuple,
    INFTClonedEvent.OutputObject
  >;
  getEvent(
    key: "INFTMinted"
  ): TypedContractEvent<
    INFTMintedEvent.InputTuple,
    INFTMintedEvent.OutputTuple,
    INFTMintedEvent.OutputObject
  >;
  getEvent(
    key: "INFTTransferred"
  ): TypedContractEvent<
    INFTTransferredEvent.InputTuple,
    INFTTransferredEvent.OutputTuple,
    INFTTransferredEvent.OutputObject
  >;
  getEvent(
    key: "INFTUpdated"
  ): TypedContractEvent<
    INFTUpdatedEvent.InputTuple,
    INFTUpdatedEvent.OutputTuple,
    INFTUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UsageAuthorized"
  ): TypedContractEvent<
    UsageAuthorizedEvent.InputTuple,
    UsageAuthorizedEvent.OutputTuple,
    UsageAuthorizedEvent.OutputObject
  >;

  filters: {
    "INFTCloned(uint256,uint256,address)": TypedContractEvent<
      INFTClonedEvent.InputTuple,
      INFTClonedEvent.OutputTuple,
      INFTClonedEvent.OutputObject
    >;
    INFTCloned: TypedContractEvent<
      INFTClonedEvent.InputTuple,
      INFTClonedEvent.OutputTuple,
      INFTClonedEvent.OutputObject
    >;

    "INFTMinted(uint256,address,string,bytes32)": TypedContractEvent<
      INFTMintedEvent.InputTuple,
      INFTMintedEvent.OutputTuple,
      INFTMintedEvent.OutputObject
    >;
    INFTMinted: TypedContractEvent<
      INFTMintedEvent.InputTuple,
      INFTMintedEvent.OutputTuple,
      INFTMintedEvent.OutputObject
    >;

    "INFTTransferred(uint256,address,address,bytes)": TypedContractEvent<
      INFTTransferredEvent.InputTuple,
      INFTTransferredEvent.OutputTuple,
      INFTTransferredEvent.OutputObject
    >;
    INFTTransferred: TypedContractEvent<
      INFTTransferredEvent.InputTuple,
      INFTTransferredEvent.OutputTuple,
      INFTTransferredEvent.OutputObject
    >;

    "INFTUpdated(uint256,string,string,bytes32)": TypedContractEvent<
      INFTUpdatedEvent.InputTuple,
      INFTUpdatedEvent.OutputTuple,
      INFTUpdatedEvent.OutputObject
    >;
    INFTUpdated: TypedContractEvent<
      INFTUpdatedEvent.InputTuple,
      INFTUpdatedEvent.OutputTuple,
      INFTUpdatedEvent.OutputObject
    >;

    "UsageAuthorized(uint256,address,uint256)": TypedContractEvent<
      UsageAuthorizedEvent.InputTuple,
      UsageAuthorizedEvent.OutputTuple,
      UsageAuthorizedEvent.OutputObject
    >;
    UsageAuthorized: TypedContractEvent<
      UsageAuthorizedEvent.InputTuple,
      UsageAuthorizedEvent.OutputTuple,
      UsageAuthorizedEvent.OutputObject
    >;
  };
}
