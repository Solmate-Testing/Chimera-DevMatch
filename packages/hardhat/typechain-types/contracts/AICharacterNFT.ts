/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AICharacterNFT {
  export type AICharacterStruct = {
    tokenId: BigNumberish;
    name: string;
    description: string;
    imageIPFS: string;
    metadataIPFS: string;
    traits: string[];
    generatedAt: BigNumberish;
    creator: AddressLike;
    aiModelHash: BytesLike;
    isPrivate: boolean;
  };

  export type AICharacterStructOutput = [
    tokenId: bigint,
    name: string,
    description: string,
    imageIPFS: string,
    metadataIPFS: string,
    traits: string[],
    generatedAt: bigint,
    creator: string,
    aiModelHash: string,
    isPrivate: boolean
  ] & {
    tokenId: bigint;
    name: string;
    description: string;
    imageIPFS: string;
    metadataIPFS: string;
    traits: string[];
    generatedAt: bigint;
    creator: string;
    aiModelHash: string;
    isPrivate: boolean;
  };

  export type GenerationRequestStruct = {
    requestId: BigNumberish;
    requester: AddressLike;
    prompt: string;
    timestamp: BigNumberish;
    fulfilled: boolean;
    promptHash: BytesLike;
  };

  export type GenerationRequestStructOutput = [
    requestId: bigint,
    requester: string,
    prompt: string,
    timestamp: bigint,
    fulfilled: boolean,
    promptHash: string
  ] & {
    requestId: bigint;
    requester: string;
    prompt: string;
    timestamp: bigint;
    fulfilled: boolean;
    promptHash: string;
  };

  export type AICharacterDataStruct = {
    name: string;
    description: string;
    imageIPFS: string;
    traits: string[];
    modelHash: BytesLike;
    isPrivate: boolean;
  };

  export type AICharacterDataStructOutput = [
    name: string,
    description: string,
    imageIPFS: string,
    traits: string[],
    modelHash: string,
    isPrivate: boolean
  ] & {
    name: string;
    description: string;
    imageIPFS: string;
    traits: string[];
    modelHash: string;
    isPrivate: boolean;
  };

  export type ROFLAttestationStruct = {
    signature: BytesLike;
    messageHash: BytesLike;
    attester: AddressLike;
    timestamp: BigNumberish;
    requestHash: BytesLike;
  };

  export type ROFLAttestationStructOutput = [
    signature: string,
    messageHash: string,
    attester: string,
    timestamp: bigint,
    requestHash: string
  ] & {
    signature: string;
    messageHash: string;
    attester: string;
    timestamp: bigint;
    requestHash: string;
  };
}

export interface AICharacterNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "approve"
      | "balanceOf"
      | "characters"
      | "creatorCharacters"
      | "generationRequests"
      | "getApproved"
      | "getCharacter"
      | "getCreatorCharacters"
      | "getGenerationRequest"
      | "isApprovedForAll"
      | "mintWithROFLAttestation"
      | "mintingFee"
      | "name"
      | "owner"
      | "ownerOf"
      | "platformFee"
      | "renounceOwnership"
      | "requestCharacterGeneration"
      | "requestToTokenId"
      | "roflAttester"
      | "roflPublicKey"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setMintingFee"
      | "setROFLAttester"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "usedAttestations"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "APIKeyDecrypted"
      | "APIKeyEncrypted"
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "CharacterGenerated"
      | "CharacterGenerationRequested"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "ROFLAttestationVerified"
      | "ROFLAuthorizationCheck"
      | "ROFLStorageAccessed"
      | "ROFLStorageSet"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "characters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCharacters",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generationRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCharacter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorCharacters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGenerationRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithROFLAttestation",
    values: [
      BigNumberish,
      AICharacterNFT.AICharacterDataStruct,
      string,
      AICharacterNFT.ROFLAttestationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCharacterGeneration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roflAttester",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roflPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setROFLAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedAttestations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "characters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGenerationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithROFLAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCharacterGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roflAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roflPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setROFLAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace APIKeyDecryptedEvent {
  export type InputTuple = [keyHash: BytesLike, accessor: AddressLike];
  export type OutputTuple = [keyHash: string, accessor: string];
  export interface OutputObject {
    keyHash: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace APIKeyEncryptedEvent {
  export type InputTuple = [keyHash: BytesLike];
  export type OutputTuple = [keyHash: string];
  export interface OutputObject {
    keyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharacterGeneratedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    requestId: BigNumberish,
    creator: AddressLike,
    name: string,
    ipfsHash: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    requestId: bigint,
    creator: string,
    name: string,
    ipfsHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    requestId: bigint;
    creator: string;
    name: string;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharacterGenerationRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    requester: AddressLike,
    prompt: string,
    promptHash: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    requester: string,
    prompt: string,
    promptHash: string
  ];
  export interface OutputObject {
    requestId: bigint;
    requester: string;
    prompt: string;
    promptHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLAttestationVerifiedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    messageHash: BytesLike,
    attester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    messageHash: string,
    attester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    messageHash: string;
    attester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLAuthorizationCheckEvent {
  export type InputTuple = [origin: AddressLike, authorized: boolean];
  export type OutputTuple = [origin: string, authorized: boolean];
  export interface OutputObject {
    origin: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageAccessedEvent {
  export type InputTuple = [key: BytesLike, accessor: AddressLike];
  export type OutputTuple = [key: string, accessor: string];
  export interface OutputObject {
    key: string;
    accessor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ROFLStorageSetEvent {
  export type InputTuple = [key: BytesLike, dataLength: BigNumberish];
  export type OutputTuple = [key: string, dataLength: bigint];
  export interface OutputObject {
    key: string;
    dataLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AICharacterNFT extends BaseContract {
  connect(runner?: ContractRunner | null): AICharacterNFT;
  waitForDeployment(): Promise<this>;

  interface: AICharacterNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  characters: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        boolean
      ] & {
        tokenId: bigint;
        name: string;
        description: string;
        imageIPFS: string;
        metadataIPFS: string;
        generatedAt: bigint;
        creator: string;
        aiModelHash: string;
        isPrivate: boolean;
      }
    ],
    "view"
  >;

  creatorCharacters: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  generationRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, string] & {
        requestId: bigint;
        requester: string;
        prompt: string;
        timestamp: bigint;
        fulfilled: boolean;
        promptHash: string;
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCharacter: TypedContractMethod<
    [tokenId: BigNumberish],
    [AICharacterNFT.AICharacterStructOutput],
    "view"
  >;

  getCreatorCharacters: TypedContractMethod<
    [creator: AddressLike],
    [bigint[]],
    "view"
  >;

  getGenerationRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [AICharacterNFT.GenerationRequestStructOutput],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintWithROFLAttestation: TypedContractMethod<
    [
      requestId: BigNumberish,
      characterData: AICharacterNFT.AICharacterDataStruct,
      ipfsHash: string,
      attestation: AICharacterNFT.ROFLAttestationStruct
    ],
    [void],
    "nonpayable"
  >;

  mintingFee: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestCharacterGeneration: TypedContractMethod<
    [prompt: string],
    [bigint],
    "payable"
  >;

  requestToTokenId: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  roflAttester: TypedContractMethod<[], [string], "view">;

  roflPublicKey: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setMintingFee: TypedContractMethod<
    [_mintingFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setROFLAttester: TypedContractMethod<
    [_roflAttester: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usedAttestations: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "characters"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        boolean
      ] & {
        tokenId: bigint;
        name: string;
        description: string;
        imageIPFS: string;
        metadataIPFS: string;
        generatedAt: bigint;
        creator: string;
        aiModelHash: string;
        isPrivate: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "creatorCharacters"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "generationRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, string] & {
        requestId: bigint;
        requester: string;
        prompt: string;
        timestamp: bigint;
        fulfilled: boolean;
        promptHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCharacter"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [AICharacterNFT.AICharacterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorCharacters"
  ): TypedContractMethod<[creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGenerationRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [AICharacterNFT.GenerationRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintWithROFLAttestation"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      characterData: AICharacterNFT.AICharacterDataStruct,
      ipfsHash: string,
      attestation: AICharacterNFT.ROFLAttestationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCharacterGeneration"
  ): TypedContractMethod<[prompt: string], [bigint], "payable">;
  getFunction(
    nameOrSignature: "requestToTokenId"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "roflAttester"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roflPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintingFee"
  ): TypedContractMethod<[_mintingFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setROFLAttester"
  ): TypedContractMethod<[_roflAttester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedAttestations"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "APIKeyDecrypted"
  ): TypedContractEvent<
    APIKeyDecryptedEvent.InputTuple,
    APIKeyDecryptedEvent.OutputTuple,
    APIKeyDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "APIKeyEncrypted"
  ): TypedContractEvent<
    APIKeyEncryptedEvent.InputTuple,
    APIKeyEncryptedEvent.OutputTuple,
    APIKeyEncryptedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CharacterGenerated"
  ): TypedContractEvent<
    CharacterGeneratedEvent.InputTuple,
    CharacterGeneratedEvent.OutputTuple,
    CharacterGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "CharacterGenerationRequested"
  ): TypedContractEvent<
    CharacterGenerationRequestedEvent.InputTuple,
    CharacterGenerationRequestedEvent.OutputTuple,
    CharacterGenerationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ROFLAttestationVerified"
  ): TypedContractEvent<
    ROFLAttestationVerifiedEvent.InputTuple,
    ROFLAttestationVerifiedEvent.OutputTuple,
    ROFLAttestationVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ROFLAuthorizationCheck"
  ): TypedContractEvent<
    ROFLAuthorizationCheckEvent.InputTuple,
    ROFLAuthorizationCheckEvent.OutputTuple,
    ROFLAuthorizationCheckEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageAccessed"
  ): TypedContractEvent<
    ROFLStorageAccessedEvent.InputTuple,
    ROFLStorageAccessedEvent.OutputTuple,
    ROFLStorageAccessedEvent.OutputObject
  >;
  getEvent(
    key: "ROFLStorageSet"
  ): TypedContractEvent<
    ROFLStorageSetEvent.InputTuple,
    ROFLStorageSetEvent.OutputTuple,
    ROFLStorageSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "APIKeyDecrypted(bytes32,address)": TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;
    APIKeyDecrypted: TypedContractEvent<
      APIKeyDecryptedEvent.InputTuple,
      APIKeyDecryptedEvent.OutputTuple,
      APIKeyDecryptedEvent.OutputObject
    >;

    "APIKeyEncrypted(bytes32)": TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;
    APIKeyEncrypted: TypedContractEvent<
      APIKeyEncryptedEvent.InputTuple,
      APIKeyEncryptedEvent.OutputTuple,
      APIKeyEncryptedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "CharacterGenerated(uint256,uint256,address,string,string)": TypedContractEvent<
      CharacterGeneratedEvent.InputTuple,
      CharacterGeneratedEvent.OutputTuple,
      CharacterGeneratedEvent.OutputObject
    >;
    CharacterGenerated: TypedContractEvent<
      CharacterGeneratedEvent.InputTuple,
      CharacterGeneratedEvent.OutputTuple,
      CharacterGeneratedEvent.OutputObject
    >;

    "CharacterGenerationRequested(uint256,address,string,bytes32)": TypedContractEvent<
      CharacterGenerationRequestedEvent.InputTuple,
      CharacterGenerationRequestedEvent.OutputTuple,
      CharacterGenerationRequestedEvent.OutputObject
    >;
    CharacterGenerationRequested: TypedContractEvent<
      CharacterGenerationRequestedEvent.InputTuple,
      CharacterGenerationRequestedEvent.OutputTuple,
      CharacterGenerationRequestedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ROFLAttestationVerified(uint256,bytes32,address)": TypedContractEvent<
      ROFLAttestationVerifiedEvent.InputTuple,
      ROFLAttestationVerifiedEvent.OutputTuple,
      ROFLAttestationVerifiedEvent.OutputObject
    >;
    ROFLAttestationVerified: TypedContractEvent<
      ROFLAttestationVerifiedEvent.InputTuple,
      ROFLAttestationVerifiedEvent.OutputTuple,
      ROFLAttestationVerifiedEvent.OutputObject
    >;

    "ROFLAuthorizationCheck(address,bool)": TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;
    ROFLAuthorizationCheck: TypedContractEvent<
      ROFLAuthorizationCheckEvent.InputTuple,
      ROFLAuthorizationCheckEvent.OutputTuple,
      ROFLAuthorizationCheckEvent.OutputObject
    >;

    "ROFLStorageAccessed(bytes32,address)": TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;
    ROFLStorageAccessed: TypedContractEvent<
      ROFLStorageAccessedEvent.InputTuple,
      ROFLStorageAccessedEvent.OutputTuple,
      ROFLStorageAccessedEvent.OutputObject
    >;

    "ROFLStorageSet(bytes32,uint256)": TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;
    ROFLStorageSet: TypedContractEvent<
      ROFLStorageSetEvent.InputTuple,
      ROFLStorageSetEvent.OutputTuple,
      ROFLStorageSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
