/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ERC7857AIAgents {
  export type AIAgentDataStruct = {
    dataHashes: BytesLike[];
    dataDescriptions: string[];
    owner: AddressLike;
    authorizedUsers: AddressLike[];
    createdAt: BigNumberish;
    isPublic: boolean;
    category: string;
    name: string;
    totalStaked: BigNumberish;
    loves: BigNumberish;
  };

  export type AIAgentDataStructOutput = [
    dataHashes: string[],
    dataDescriptions: string[],
    owner: string,
    authorizedUsers: string[],
    createdAt: bigint,
    isPublic: boolean,
    category: string,
    name: string,
    totalStaked: bigint,
    loves: bigint
  ] & {
    dataHashes: string[];
    dataDescriptions: string[];
    owner: string;
    authorizedUsers: string[];
    createdAt: bigint;
    isPublic: boolean;
    category: string;
    name: string;
    totalStaked: bigint;
    loves: bigint;
  };
}

export interface ERC7857AIAgentsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeUsage"
      | "authorizedUsersOf"
      | "clone"
      | "clonePublic"
      | "dataDescriptionsOf"
      | "dataHashesOf"
      | "getAgentData"
      | "getOwnerTokens"
      | "getVerifier"
      | "loveAgent"
      | "mint"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "stakeOnAgent"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferOwnership"
      | "transferPublic"
      | "update"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentLoved"
      | "AgentStaked"
      | "AuthorizedUsage"
      | "Cloned"
      | "Minted"
      | "OwnershipTransferred"
      | "PublishedSealedKey"
      | "Transferred"
      | "Updated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeUsage",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUsersOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clone",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clonePublic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataDescriptionsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataHashesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loveAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BytesLike[], string[], string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOnAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPublic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "authorizeUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUsersOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonePublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataDescriptionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataHashesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loveAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOnAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace AgentLovedEvent {
  export type InputTuple = [tokenId: BigNumberish, user: AddressLike];
  export type OutputTuple = [tokenId: bigint, user: string];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentStakedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    staker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, staker: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedUsageEvent {
  export type InputTuple = [tokenId: BigNumberish, user: AddressLike];
  export type OutputTuple = [tokenId: bigint, user: string];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClonedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newTokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newTokenId: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    newTokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    creator: AddressLike,
    dataHashes: BytesLike[],
    dataDescriptions: string[]
  ];
  export type OutputTuple = [
    tokenId: bigint,
    creator: string,
    dataHashes: string[],
    dataDescriptions: string[]
  ];
  export interface OutputObject {
    tokenId: bigint;
    creator: string;
    dataHashes: string[];
    dataDescriptions: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublishedSealedKeyEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    sealedKey: BytesLike
  ];
  export type OutputTuple = [to: string, tokenId: bigint, sealedKey: string];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    sealedKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, from: string, to: string];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    oldDataHashes: BytesLike[],
    newDataHashes: BytesLike[]
  ];
  export type OutputTuple = [
    tokenId: bigint,
    oldDataHashes: string[],
    newDataHashes: string[]
  ];
  export interface OutputObject {
    tokenId: bigint;
    oldDataHashes: string[];
    newDataHashes: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC7857AIAgents extends BaseContract {
  connect(runner?: ContractRunner | null): ERC7857AIAgents;
  waitForDeployment(): Promise<this>;

  interface: ERC7857AIAgentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeUsage: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedUsersOf: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  clone: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, proofs: BytesLike[]],
    [bigint],
    "payable"
  >;

  clonePublic: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  dataDescriptionsOf: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  dataHashesOf: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getAgentData: TypedContractMethod<
    [tokenId: BigNumberish],
    [ERC7857AIAgents.AIAgentDataStructOutput],
    "view"
  >;

  getOwnerTokens: TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;

  getVerifier: TypedContractMethod<[], [string], "view">;

  loveAgent: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  mint: TypedContractMethod<
    [
      proofs: BytesLike[],
      descriptions: string[],
      agentName: string,
      category: string,
      isPublic: boolean
    ],
    [bigint],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stakeOnAgent: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, proofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPublic: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  update: TypedContractMethod<
    [tokenId: BigNumberish, proofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeUsage"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedUsersOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "clone"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, proofs: BytesLike[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "clonePublic"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "dataDescriptionsOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "dataHashesOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAgentData"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ERC7857AIAgents.AIAgentDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerTokens"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "loveAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      proofs: BytesLike[],
      descriptions: string[],
      agentName: string,
      category: string,
      isPublic: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeOnAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, proofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPublic"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [tokenId: BigNumberish, proofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AgentLoved"
  ): TypedContractEvent<
    AgentLovedEvent.InputTuple,
    AgentLovedEvent.OutputTuple,
    AgentLovedEvent.OutputObject
  >;
  getEvent(
    key: "AgentStaked"
  ): TypedContractEvent<
    AgentStakedEvent.InputTuple,
    AgentStakedEvent.OutputTuple,
    AgentStakedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedUsage"
  ): TypedContractEvent<
    AuthorizedUsageEvent.InputTuple,
    AuthorizedUsageEvent.OutputTuple,
    AuthorizedUsageEvent.OutputObject
  >;
  getEvent(
    key: "Cloned"
  ): TypedContractEvent<
    ClonedEvent.InputTuple,
    ClonedEvent.OutputTuple,
    ClonedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PublishedSealedKey"
  ): TypedContractEvent<
    PublishedSealedKeyEvent.InputTuple,
    PublishedSealedKeyEvent.OutputTuple,
    PublishedSealedKeyEvent.OutputObject
  >;
  getEvent(
    key: "Transferred"
  ): TypedContractEvent<
    TransferredEvent.InputTuple,
    TransferredEvent.OutputTuple,
    TransferredEvent.OutputObject
  >;
  getEvent(
    key: "Updated"
  ): TypedContractEvent<
    UpdatedEvent.InputTuple,
    UpdatedEvent.OutputTuple,
    UpdatedEvent.OutputObject
  >;

  filters: {
    "AgentLoved(uint256,address)": TypedContractEvent<
      AgentLovedEvent.InputTuple,
      AgentLovedEvent.OutputTuple,
      AgentLovedEvent.OutputObject
    >;
    AgentLoved: TypedContractEvent<
      AgentLovedEvent.InputTuple,
      AgentLovedEvent.OutputTuple,
      AgentLovedEvent.OutputObject
    >;

    "AgentStaked(uint256,address,uint256)": TypedContractEvent<
      AgentStakedEvent.InputTuple,
      AgentStakedEvent.OutputTuple,
      AgentStakedEvent.OutputObject
    >;
    AgentStaked: TypedContractEvent<
      AgentStakedEvent.InputTuple,
      AgentStakedEvent.OutputTuple,
      AgentStakedEvent.OutputObject
    >;

    "AuthorizedUsage(uint256,address)": TypedContractEvent<
      AuthorizedUsageEvent.InputTuple,
      AuthorizedUsageEvent.OutputTuple,
      AuthorizedUsageEvent.OutputObject
    >;
    AuthorizedUsage: TypedContractEvent<
      AuthorizedUsageEvent.InputTuple,
      AuthorizedUsageEvent.OutputTuple,
      AuthorizedUsageEvent.OutputObject
    >;

    "Cloned(uint256,uint256,address,address)": TypedContractEvent<
      ClonedEvent.InputTuple,
      ClonedEvent.OutputTuple,
      ClonedEvent.OutputObject
    >;
    Cloned: TypedContractEvent<
      ClonedEvent.InputTuple,
      ClonedEvent.OutputTuple,
      ClonedEvent.OutputObject
    >;

    "Minted(uint256,address,bytes32[],string[])": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PublishedSealedKey(address,uint256,bytes)": TypedContractEvent<
      PublishedSealedKeyEvent.InputTuple,
      PublishedSealedKeyEvent.OutputTuple,
      PublishedSealedKeyEvent.OutputObject
    >;
    PublishedSealedKey: TypedContractEvent<
      PublishedSealedKeyEvent.InputTuple,
      PublishedSealedKeyEvent.OutputTuple,
      PublishedSealedKeyEvent.OutputObject
    >;

    "Transferred(uint256,address,address)": TypedContractEvent<
      TransferredEvent.InputTuple,
      TransferredEvent.OutputTuple,
      TransferredEvent.OutputObject
    >;
    Transferred: TypedContractEvent<
      TransferredEvent.InputTuple,
      TransferredEvent.OutputTuple,
      TransferredEvent.OutputObject
    >;

    "Updated(uint256,bytes32[],bytes32[])": TypedContractEvent<
      UpdatedEvent.InputTuple,
      UpdatedEvent.OutputTuple,
      UpdatedEvent.OutputObject
    >;
    Updated: TypedContractEvent<
      UpdatedEvent.InputTuple,
      UpdatedEvent.OutputTuple,
      UpdatedEvent.OutputObject
    >;
  };
}
