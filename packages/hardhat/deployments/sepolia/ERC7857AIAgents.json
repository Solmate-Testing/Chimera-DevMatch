{
  "address": "0x518a1B526BAA2c09C2c8355C1488f0d7d41f5044",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDataVerifier",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AgentLoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AgentStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AuthorizedUsage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Cloned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "dataHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "dataDescriptions",
          "type": "string[]"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sealedKey",
          "type": "bytes"
        }
      ],
      "name": "PublishedSealedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "oldDataHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "newDataHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "Updated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "authorizeUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedUsersOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "clonePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "dataDescriptionsOf",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "dataHashesOf",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgentData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "dataHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "dataDescriptions",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "authorizedUsers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPublic",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loves",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC7857AIAgents.AIAgentData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVerifier",
      "outputs": [
        {
          "internalType": "contract IDataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "loveAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeOnAgent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "proofs",
          "type": "bytes[]"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IDataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4e34539e506505edb63113a64a3b6070d452bce700aae5ae6231b445c9467aa",
  "receipt": {
    "to": null,
    "from": "0x992fEec8ECfaA9f3b1c5086202E171a399dD79Af",
    "contractAddress": "0x518a1B526BAA2c09C2c8355C1488f0d7d41f5044",
    "transactionIndex": 2,
    "gasUsed": "3548663",
    "logsBloom": "0x
    "blockHash": "0xfb294244d2cb1cd0c20d5566925f01520c1ad9d82852599aa69cfb07d6d80343",
    "transactionHash": "0xd4e34539e506505edb63113a64a3b6070d452bce700aae5ae6231b445c9467aa",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8945942,
        "transactionHash": "0xd4e34539e506505edb63113a64a3b6070d452bce700aae5ae6231b445c9467aa",
        "address": "0x518a1B526BAA2c09C2c8355C1488f0d7d41f5044",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000992feec8ecfaa9f3b1c5086202e171a399dd79af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfb294244d2cb1cd0c20d5566925f01520c1ad9d82852599aa69cfb07d6d80343"
      }
    ],
    "blockNumber": 8945942,
    "cumulativeGasUsed": "3590663",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x19922d2d1e2b45c81c69030B709f462B2289f5A9"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e5dd6e604824e1e481c666f2e2de44f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDataVerifier\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AgentLoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AgentStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AuthorizedUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"dataHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dataDescriptions\",\"type\":\"string[]\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sealedKey\",\"type\":\"bytes\"}],\"name\":\"PublishedSealedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"oldDataHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"newDataHashes\",\"type\":\"bytes32[]\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"authorizeUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedUsersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"clonePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dataDescriptionsOf\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dataHashesOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgentData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"dataDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorizedUsers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC7857AIAgents.AIAgentData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"contract IDataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"loveAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeOnAgent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"proofs\",\"type\":\"bytes[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IDataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:erc\":\"Implements ERC-7857 standard for AI agents with private metadata\",\"custom:security\":\"Uses TEE verification for all critical operations\",\"details\":\"AI agent NFTs with TEE-protected metadata for secure agent ownership and transfer\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"authorizeUsage(uint256,address)\":{\"params\":{\"tokenId\":\"The token to authorize usage for\",\"user\":\"The user to authorize\"}},\"authorizedUsersOf(uint256)\":{\"params\":{\"tokenId\":\"The token identifier\"},\"returns\":{\"_0\":\"address[] The current authorized users of the token\"}},\"clone(address,uint256,bytes[])\":{\"params\":{\"proofs\":\"Proofs of data availability for recipient\",\"to\":\"Address to clone agent data to\",\"tokenId\":\"The token to clone data from\"},\"returns\":{\"newTokenId\":\"The ID of the newly cloned token\"}},\"clonePublic(address,uint256)\":{\"params\":{\"to\":\"Address to clone agent data to\",\"tokenId\":\"The token to clone data from\"},\"returns\":{\"newTokenId\":\"The ID of the newly cloned token\"}},\"dataDescriptionsOf(uint256)\":{\"params\":{\"tokenId\":\"The token identifier\"},\"returns\":{\"_0\":\"string[] The current data descriptions of the token\"}},\"dataHashesOf(uint256)\":{\"params\":{\"tokenId\":\"The token identifier\"},\"returns\":{\"_0\":\"bytes32[] The current data hashes of the token\"}},\"getAgentData(uint256)\":{\"params\":{\"tokenId\":\"The agent token ID\"},\"returns\":{\"_0\":\"AIAgentData Complete agent data structure\"}},\"getOwnerTokens(address)\":{\"params\":{\"owner\":\"The owner address\"},\"returns\":{\"_0\":\"uint256[] Array of token IDs owned by the address\"}},\"getVerifier()\":{\"returns\":{\"_0\":\"IDataVerifier The address of the verifier contract\"}},\"loveAgent(uint256)\":{\"params\":{\"tokenId\":\"The agent token to love\"}},\"mint(bytes[],string[],string,string,bool)\":{\"params\":{\"agentName\":\"Name of the AI agent\",\"category\":\"Category of the agent (AI Agent, MCP, Copy Trading Bot)\",\"descriptions\":\"Human-readable descriptions of the data\",\"isPublic\":\"Whether the agent data is public\",\"proofs\":\"Array of ownership proofs for the agent data\"},\"returns\":{\"tokenId\":\"The ID of the newly minted token\"}},\"name()\":{\"returns\":{\"_0\":\"string The name of the NFT collection\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"The token identifier\"},\"returns\":{\"_0\":\"address The current owner of the token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stakeOnAgent(uint256)\":{\"params\":{\"tokenId\":\"The agent token to stake on\"}},\"symbol()\":{\"returns\":{\"_0\":\"string The symbol of the NFT collection\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"The token identifier\"},\"returns\":{\"_0\":\"string The metadata URI\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 Total number of minted tokens\"}},\"transfer(address,uint256,bytes[])\":{\"params\":{\"proofs\":\"Proofs of data availability for recipient\",\"to\":\"Address to transfer agent to\",\"tokenId\":\"The token to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPublic(address,uint256)\":{\"params\":{\"to\":\"Address to transfer agent to\",\"tokenId\":\"The token to transfer\"}},\"update(uint256,bytes[])\":{\"params\":{\"proofs\":\"Array of ownership proofs for new data\",\"tokenId\":\"The token to update\"}}},\"title\":\"ERC7857AIAgents\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorizeUsage(uint256,address)\":{\"notice\":\"Authorize a user to use the agent\"},\"authorizedUsersOf(uint256)\":{\"notice\":\"Get the authorized users of a token\"},\"clone(address,uint256,bytes[])\":{\"notice\":\"Clone agent data to a new token (data only, not ownership)\"},\"clonePublic(address,uint256)\":{\"notice\":\"Clone public agent (no proofs needed)\"},\"dataDescriptionsOf(uint256)\":{\"notice\":\"Get the data descriptions of a token\"},\"dataHashesOf(uint256)\":{\"notice\":\"Get the data hashes of a token\"},\"getAgentData(uint256)\":{\"notice\":\"Get agent information for marketplace\"},\"getOwnerTokens(address)\":{\"notice\":\"Get all agents owned by an address\"},\"getVerifier()\":{\"notice\":\"Get the verifier interface that this NFT uses\"},\"loveAgent(uint256)\":{\"notice\":\"Love an agent (increment love counter)\"},\"mint(bytes[],string[],string,string,bool)\":{\"notice\":\"Mint new AI Agent NFT with data ownership proofs\"},\"name()\":{\"notice\":\"Get the collection name\"},\"ownerOf(uint256)\":{\"notice\":\"Get token owner\"},\"stakeOnAgent(uint256)\":{\"notice\":\"Stake ETH on an agent (marketplace integration)\"},\"symbol()\":{\"notice\":\"Get the collection symbol\"},\"tokenURI(uint256)\":{\"notice\":\"Get the metadata URI for a specific token\"},\"totalSupply()\":{\"notice\":\"Get total supply of tokens\"},\"transfer(address,uint256,bytes[])\":{\"notice\":\"Transfer full agent data ownership to another address\"},\"transferPublic(address,uint256)\":{\"notice\":\"Transfer public agent (no proofs needed)\"},\"update(uint256,bytes[])\":{\"notice\":\"Update agent data with new ownership proofs\"}},\"notice\":\"Implementation of ERC-7857 AI Agents NFT with private metadata\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC7857AIAgents.sol\":\"ERC7857AIAgents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/ERC7857AIAgents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IDataVerifier.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title ERC7857AIAgents\\n * @notice Implementation of ERC-7857 AI Agents NFT with private metadata\\n * @dev AI agent NFTs with TEE-protected metadata for secure agent ownership and transfer\\n * @custom:security Uses TEE verification for all critical operations\\n * @custom:erc Implements ERC-7857 standard for AI agents with private metadata\\n */\\ncontract ERC7857AIAgents is ReentrancyGuard, Ownable {\\n    \\n    // The TEE verifier used for all proof validations\\n    IDataVerifier public immutable verifier;\\n    \\n    /**\\n     * @dev Structure representing an AI Agent NFT\\n     * @param dataHashes Array of hashes representing agent's private data\\n     * @param dataDescriptions Human-readable descriptions of the data\\n     * @param owner Current owner of the agent\\n     * @param authorizedUsers Array of users authorized to use the agent\\n     * @param createdAt Timestamp when agent was created\\n     * @param isPublic Whether agent data is public or private\\n     * @param category Type of AI agent (AI Agent, MCP, Copy Trading Bot)\\n     * @param name Human-readable name of the agent\\n     * @param totalStaked Total ETH staked on this agent (for marketplace integration)\\n     * @param loves Number of \\\"loves\\\" from users (social metric)\\n     */\\n    struct AIAgentData {\\n        bytes32[] dataHashes;\\n        string[] dataDescriptions;\\n        address owner;\\n        address[] authorizedUsers;\\n        uint256 createdAt;\\n        bool isPublic;\\n        string category;\\n        string name;\\n        uint256 totalStaked;\\n        uint256 loves;\\n    }\\n    \\n    // Token ID counter\\n    uint256 private _tokenIdCounter = 1;\\n    \\n    // Mapping from token ID to agent data\\n    mapping(uint256 => AIAgentData) private _agents;\\n    \\n    // Mapping from token ID to user authorization status\\n    mapping(uint256 => mapping(address => bool)) private _authorizations;\\n    \\n    // Mapping from owner to list of owned tokens\\n    mapping(address => uint256[]) private _ownerTokens;\\n    \\n    // ERC-7857 Events\\n    event Minted(\\n        uint256 indexed tokenId,\\n        address indexed creator,\\n        bytes32[] dataHashes,\\n        string[] dataDescriptions\\n    );\\n    \\n    event Updated(\\n        uint256 indexed tokenId,\\n        bytes32[] oldDataHashes,\\n        bytes32[] newDataHashes\\n    );\\n    \\n    event Transferred(\\n        uint256 tokenId,\\n        address indexed from,\\n        address indexed to\\n    );\\n    \\n    event Cloned(\\n        uint256 indexed tokenId,\\n        uint256 indexed newTokenId,\\n        address from,\\n        address to\\n    );\\n    \\n    event AuthorizedUsage(\\n        uint256 indexed tokenId,\\n        address indexed user\\n    );\\n    \\n    event PublishedSealedKey(\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        bytes sealedKey\\n    );\\n    \\n    // Marketplace integration events\\n    event AgentStaked(\\n        uint256 indexed tokenId,\\n        address indexed staker,\\n        uint256 amount\\n    );\\n    \\n    event AgentLoved(\\n        uint256 indexed tokenId,\\n        address indexed user\\n    );\\n    \\n    constructor(IDataVerifier _verifier) Ownable(msg.sender) {\\n        require(address(_verifier) != address(0), \\\"Invalid verifier\\\");\\n        verifier = _verifier;\\n    }\\n    \\n    // \\u2705 ERC-7857 METADATA INTERFACE\\n    \\n    /**\\n     * @notice Get the collection name\\n     * @return string The name of the NFT collection\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Chimera AI Agents\\\";\\n    }\\n    \\n    /**\\n     * @notice Get the collection symbol\\n     * @return string The symbol of the NFT collection\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"CAI\\\";\\n    }\\n    \\n    /**\\n     * @notice Get the metadata URI for a specific token\\n     * @param tokenId The token identifier\\n     * @return string The metadata URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(\\n            \\\"https://api.chimera-devmatch.com/agents/metadata/\\\",\\n            _toString(tokenId)\\n        ));\\n    }\\n    \\n    /**\\n     * @notice Update agent data with new ownership proofs\\n     * @param tokenId The token to update\\n     * @param proofs Array of ownership proofs for new data\\n     */\\n    function update(\\n        uint256 tokenId,\\n        bytes[] calldata proofs\\n    ) external nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].owner == msg.sender, \\\"Not token owner\\\");\\n        require(proofs.length > 0, \\\"No proofs provided\\\");\\n        \\n        bytes32[] memory oldDataHashes = _agents[tokenId].dataHashes;\\n        bytes32[] memory newDataHashes = new bytes32[](proofs.length);\\n        \\n        // Verify all ownership proofs\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            IDataVerifier.OwnershipProofOutput memory output = \\n                verifier.verifyOwnership(proofs[i]);\\n            require(output.isValid, \\\"Invalid ownership proof\\\");\\n            require(output.dataHashes.length == 1, \\\"Expected single hash per proof\\\");\\n            newDataHashes[i] = output.dataHashes[0];\\n        }\\n        \\n        // Update agent data\\n        _agents[tokenId].dataHashes = newDataHashes;\\n        \\n        emit Updated(tokenId, oldDataHashes, newDataHashes);\\n    }\\n    \\n    /**\\n     * @notice Get the data hashes of a token\\n     * @param tokenId The token identifier\\n     * @return bytes32[] The current data hashes of the token\\n     */\\n    function dataHashesOf(uint256 tokenId) public view returns (bytes32[] memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return _agents[tokenId].dataHashes;\\n    }\\n    \\n    /**\\n     * @notice Get the data descriptions of a token\\n     * @param tokenId The token identifier\\n     * @return string[] The current data descriptions of the token\\n     */\\n    function dataDescriptionsOf(uint256 tokenId) public view returns (string[] memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return _agents[tokenId].dataDescriptions;\\n    }\\n    \\n    // \\u2705 ERC-7857 MAIN NFT INTERFACE\\n    \\n    /**\\n     * @notice Get the verifier interface that this NFT uses\\n     * @return IDataVerifier The address of the verifier contract\\n     */\\n    function getVerifier() external view returns (IDataVerifier) {\\n        return verifier;\\n    }\\n    \\n    /**\\n     * @notice Mint new AI Agent NFT with data ownership proofs\\n     * @param proofs Array of ownership proofs for the agent data\\n     * @param descriptions Human-readable descriptions of the data\\n     * @param agentName Name of the AI agent\\n     * @param category Category of the agent (AI Agent, MCP, Copy Trading Bot)\\n     * @param isPublic Whether the agent data is public\\n     * @return tokenId The ID of the newly minted token\\n     */\\n    function mint(\\n        bytes[] calldata proofs,\\n        string[] calldata descriptions,\\n        string calldata agentName,\\n        string calldata category,\\n        bool isPublic\\n    ) external payable nonReentrant returns (uint256 tokenId) {\\n        require(proofs.length > 0, \\\"No proofs provided\\\");\\n        require(proofs.length == descriptions.length, \\\"Mismatched arrays\\\");\\n        require(bytes(agentName).length > 0, \\\"Agent name required\\\");\\n        \\n        bytes32[] memory dataHashes = new bytes32[](proofs.length);\\n        \\n        // Verify all ownership proofs\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            IDataVerifier.OwnershipProofOutput memory output = \\n                verifier.verifyOwnership(proofs[i]);\\n            require(output.isValid, \\\"Invalid ownership proof\\\");\\n            require(output.dataHashes.length == 1, \\\"Expected single hash per proof\\\");\\n            dataHashes[i] = output.dataHashes[0];\\n        }\\n        \\n        tokenId = _tokenIdCounter++;\\n        \\n        _agents[tokenId] = AIAgentData({\\n            dataHashes: dataHashes,\\n            dataDescriptions: descriptions,\\n            owner: msg.sender,\\n            authorizedUsers: new address[](0),\\n            createdAt: block.timestamp,\\n            isPublic: isPublic,\\n            category: category,\\n            name: agentName,\\n            totalStaked: 0,\\n            loves: 0\\n        });\\n        \\n        _ownerTokens[msg.sender].push(tokenId);\\n        \\n        emit Minted(tokenId, msg.sender, dataHashes, descriptions);\\n    }\\n    \\n    /**\\n     * @notice Transfer full agent data ownership to another address\\n     * @param to Address to transfer agent to\\n     * @param tokenId The token to transfer\\n     * @param proofs Proofs of data availability for recipient\\n     */\\n    function transfer(\\n        address to,\\n        uint256 tokenId,\\n        bytes[] calldata proofs\\n    ) external nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].owner == msg.sender, \\\"Not token owner\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n        \\n        AIAgentData storage agent = _agents[tokenId];\\n        require(proofs.length == agent.dataHashes.length, \\\"Mismatched proofs\\\");\\n        \\n        bytes32[] memory newDataHashes = new bytes32[](proofs.length);\\n        \\n        // Verify all transfer validity proofs\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            IDataVerifier.TransferValidityProofOutput memory output = \\n                verifier.verifyTransferValidity(proofs[i]);\\n            require(output.isValid, \\\"Invalid transfer proof\\\");\\n            require(\\n                output.oldDataHashes.length == 1 &&\\n                output.oldDataHashes[0] == agent.dataHashes[i], \\n                \\\"Hash mismatch\\\"\\n            );\\n            require(output.newDataHashes.length == 1, \\\"Expected single new hash\\\");\\n            \\n            newDataHashes[i] = output.newDataHashes[0];\\n            \\n            // Publish sealed key for recipient\\n            emit PublishedSealedKey(to, tokenId, output.sealedKey);\\n        }\\n        \\n        // Update ownership\\n        _removeTokenFromOwner(msg.sender, tokenId);\\n        _ownerTokens[to].push(tokenId);\\n        \\n        // Update agent data\\n        emit Updated(tokenId, agent.dataHashes, newDataHashes);\\n        agent.dataHashes = newDataHashes;\\n        agent.owner = to;\\n        agent.authorizedUsers = new address[](0); // Clear authorizations\\n        \\n        emit Transferred(tokenId, msg.sender, to);\\n    }\\n    \\n    /**\\n     * @notice Clone agent data to a new token (data only, not ownership)\\n     * @param to Address to clone agent data to\\n     * @param tokenId The token to clone data from\\n     * @param proofs Proofs of data availability for recipient\\n     * @return newTokenId The ID of the newly cloned token\\n     */\\n    function clone(\\n        address to,\\n        uint256 tokenId,\\n        bytes[] calldata proofs\\n    ) external payable nonReentrant returns (uint256 newTokenId) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].owner == msg.sender, \\\"Not token owner\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        \\n        AIAgentData storage sourceAgent = _agents[tokenId];\\n        require(proofs.length == sourceAgent.dataHashes.length, \\\"Mismatched proofs\\\");\\n        \\n        bytes32[] memory newDataHashes = new bytes32[](proofs.length);\\n        \\n        // Verify all transfer validity proofs\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            IDataVerifier.TransferValidityProofOutput memory output = \\n                verifier.verifyTransferValidity(proofs[i]);\\n            require(output.isValid, \\\"Invalid clone proof\\\");\\n            require(\\n                output.oldDataHashes.length == 1 &&\\n                output.oldDataHashes[0] == sourceAgent.dataHashes[i], \\n                \\\"Hash mismatch\\\"\\n            );\\n            require(output.newDataHashes.length == 1, \\\"Expected single new hash\\\");\\n            \\n            newDataHashes[i] = output.newDataHashes[0];\\n            \\n            emit PublishedSealedKey(to, tokenId, output.sealedKey);\\n        }\\n        \\n        newTokenId = _tokenIdCounter++;\\n        \\n        _agents[newTokenId] = AIAgentData({\\n            dataHashes: newDataHashes,\\n            dataDescriptions: sourceAgent.dataDescriptions,\\n            owner: to,\\n            authorizedUsers: new address[](0),\\n            createdAt: block.timestamp,\\n            isPublic: sourceAgent.isPublic,\\n            category: sourceAgent.category,\\n            name: string(abi.encodePacked(sourceAgent.name, \\\" (Clone)\\\")),\\n            totalStaked: 0,\\n            loves: 0\\n        });\\n        \\n        _ownerTokens[to].push(newTokenId);\\n        \\n        emit Cloned(tokenId, newTokenId, msg.sender, to);\\n    }\\n    \\n    /**\\n     * @notice Transfer public agent (no proofs needed)\\n     * @param to Address to transfer agent to\\n     * @param tokenId The token to transfer\\n     */\\n    function transferPublic(\\n        address to,\\n        uint256 tokenId\\n    ) external nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].owner == msg.sender, \\\"Not token owner\\\");\\n        require(_agents[tokenId].isPublic, \\\"Agent is not public\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n        \\n        // Update ownership\\n        _removeTokenFromOwner(msg.sender, tokenId);\\n        _ownerTokens[to].push(tokenId);\\n        \\n        _agents[tokenId].owner = to;\\n        _agents[tokenId].authorizedUsers = new address[](0); // Clear authorizations\\n        \\n        emit Transferred(tokenId, msg.sender, to);\\n    }\\n    \\n    /**\\n     * @notice Clone public agent (no proofs needed)\\n     * @param to Address to clone agent data to\\n     * @param tokenId The token to clone data from\\n     * @return newTokenId The ID of the newly cloned token\\n     */\\n    function clonePublic(\\n        address to,\\n        uint256 tokenId\\n    ) external payable nonReentrant returns (uint256 newTokenId) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].isPublic, \\\"Agent is not public\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        \\n        AIAgentData storage sourceAgent = _agents[tokenId];\\n        newTokenId = _tokenIdCounter++;\\n        \\n        _agents[newTokenId] = AIAgentData({\\n            dataHashes: sourceAgent.dataHashes,\\n            dataDescriptions: sourceAgent.dataDescriptions,\\n            owner: to,\\n            authorizedUsers: new address[](0),\\n            createdAt: block.timestamp,\\n            isPublic: true,\\n            category: sourceAgent.category,\\n            name: string(abi.encodePacked(sourceAgent.name, \\\" (Public Clone)\\\")),\\n            totalStaked: 0,\\n            loves: 0\\n        });\\n        \\n        _ownerTokens[to].push(newTokenId);\\n        \\n        emit Cloned(tokenId, newTokenId, msg.sender, to);\\n    }\\n    \\n    /**\\n     * @notice Authorize a user to use the agent\\n     * @param tokenId The token to authorize usage for\\n     * @param user The user to authorize\\n     */\\n    function authorizeUsage(\\n        uint256 tokenId,\\n        address user\\n    ) external nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(_agents[tokenId].owner == msg.sender, \\\"Not token owner\\\");\\n        require(user != address(0), \\\"Invalid user\\\");\\n        require(!_authorizations[tokenId][user], \\\"Already authorized\\\");\\n        \\n        _authorizations[tokenId][user] = true;\\n        _agents[tokenId].authorizedUsers.push(user);\\n        \\n        emit AuthorizedUsage(tokenId, user);\\n    }\\n    \\n    /**\\n     * @notice Get token owner\\n     * @param tokenId The token identifier\\n     * @return address The current owner of the token\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return _agents[tokenId].owner;\\n    }\\n    \\n    /**\\n     * @notice Get the authorized users of a token\\n     * @param tokenId The token identifier\\n     * @return address[] The current authorized users of the token\\n     */\\n    function authorizedUsersOf(uint256 tokenId) external view returns (address[] memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return _agents[tokenId].authorizedUsers;\\n    }\\n    \\n    // \\u2705 MARKETPLACE INTEGRATION\\n    \\n    /**\\n     * @notice Stake ETH on an agent (marketplace integration)\\n     * @param tokenId The agent token to stake on\\n     */\\n    function stakeOnAgent(uint256 tokenId) external payable nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(msg.value > 0, \\\"Must stake > 0\\\");\\n        \\n        _agents[tokenId].totalStaked += msg.value;\\n        \\n        // Revenue sharing with agent owner (70% to creator, 30% to platform)\\n        uint256 platformFee = (msg.value * 3000) / 10000; // 30%\\n        uint256 creatorAmount = msg.value - platformFee;\\n        \\n        address agentOwner = _agents[tokenId].owner;\\n        payable(agentOwner).transfer(creatorAmount);\\n        // Platform fee remains in contract\\n        \\n        emit AgentStaked(tokenId, msg.sender, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Love an agent (increment love counter)\\n     * @param tokenId The agent token to love\\n     */\\n    function loveAgent(uint256 tokenId) external nonReentrant {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        \\n        _agents[tokenId].loves++;\\n        \\n        emit AgentLoved(tokenId, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Get agent information for marketplace\\n     * @param tokenId The agent token ID\\n     * @return AIAgentData Complete agent data structure\\n     */\\n    function getAgentData(uint256 tokenId) external view returns (AIAgentData memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return _agents[tokenId];\\n    }\\n    \\n    /**\\n     * @notice Get all agents owned by an address\\n     * @param owner The owner address\\n     * @return uint256[] Array of token IDs owned by the address\\n     */\\n    function getOwnerTokens(address owner) external view returns (uint256[] memory) {\\n        return _ownerTokens[owner];\\n    }\\n    \\n    /**\\n     * @notice Get total supply of tokens\\n     * @return uint256 Total number of minted tokens\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _tokenIdCounter - 1;\\n    }\\n    \\n    // \\u2705 INTERNAL HELPER FUNCTIONS\\n    \\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId > 0 && tokenId < _tokenIdCounter && _agents[tokenId].owner != address(0);\\n    }\\n    \\n    function _removeTokenFromOwner(address owner, uint256 tokenId) internal {\\n        uint256[] storage tokens = _ownerTokens[owner];\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == tokenId) {\\n                tokens[i] = tokens[tokens.length - 1];\\n                tokens.pop();\\n                break;\\n            }\\n        }\\n    }\\n    \\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        \\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        \\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        \\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0x33033561ed8a1df2fd09a5d113708b13cc47461f7c075ee081fbd5b5b0ca66d3\",\"license\":\"MIT\"},\"contracts/IDataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDataVerifier Interface\\n * @notice Interface for data verification systems supporting different proof mechanisms\\n * @dev Supports both TEE and ZKP verification methods for ERC-7857 AI Agent NFTs\\n */\\ninterface IDataVerifier {\\n    /**\\n     * @dev Output structure for ownership proof verification\\n     * @param dataHashes Array of validated data hashes from the proof\\n     * @param isValid Whether the ownership proof is valid\\n     */\\n    struct OwnershipProofOutput {\\n        bytes32[] dataHashes;\\n        bool isValid;\\n    }\\n\\n    /**\\n     * @dev Output structure for transfer validity proof verification\\n     * @param oldDataHashes Array of original data hashes before transfer\\n     * @param newDataHashes Array of new data hashes after re-encryption\\n     * @param pubKey Public key of the recipient for secure key transfer\\n     * @param sealedKey Encrypted key sealed for the recipient\\n     * @param isValid Whether the transfer validity proof is valid\\n     */\\n    struct TransferValidityProofOutput {\\n        bytes32[] oldDataHashes;\\n        bytes32[] newDataHashes;\\n        bytes pubKey;\\n        bytes sealedKey;\\n        bool isValid;\\n    }\\n\\n    /**\\n     * @notice Verify ownership of data through cryptographic proof\\n     * @dev Verifies that the prover possesses the original data by demonstrating \\n     *      knowledge of pre-images that generate the claimed dataHashes\\n     * @param _proof Cryptographic proof generated by companion prover system\\n     * @return OwnershipProofOutput containing verification result and validated data hashes\\n     */\\n    function verifyOwnership(\\n        bytes calldata _proof\\n    ) external returns (OwnershipProofOutput memory);\\n\\n    /**\\n     * @notice Verify validity of data transfer operation\\n     * @dev Verifies secure data integrity and availability by proving:\\n     *      - Knowledge of original data (pre-images of oldDataHashes)\\n     *      - Ability to decrypt with oldKey and re-encrypt with newKey\\n     *      - Secure transmission of newKey using recipient's public key\\n     *      - Integrity of newly encrypted data matching newDataHashes\\n     *      - Data availability confirmed by recipient's signature\\n     * @param _proof Cryptographic proof generated by companion prover system\\n     * @return TransferValidityProofOutput containing verification result and transfer details\\n     */\\n    function verifyTransferValidity(\\n        bytes calldata _proof\\n    ) external returns (TransferValidityProofOutput memory);\\n}\",\"keccak256\":\"0x3cff33c9fa5c0c7ac57fe6366023265f57fcaf7413b0c127bd4d3f61bdaff9c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "custom:erc": "Implements ERC-7857 standard for AI agents with private metadata",
    "custom:security": "Uses TEE verification for all critical operations",
    "details": "AI agent NFTs with TEE-protected metadata for secure agent ownership and transfer",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "authorizeUsage(uint256,address)": {
        "params": {
          "tokenId": "The token to authorize usage for",
          "user": "The user to authorize"
        }
      },
      "authorizedUsersOf(uint256)": {
        "params": {
          "tokenId": "The token identifier"
        },
        "returns": {
          "_0": "address[] The current authorized users of the token"
        }
      },
      "clone(address,uint256,bytes[])": {
        "params": {
          "proofs": "Proofs of data availability for recipient",
          "to": "Address to clone agent data to",
          "tokenId": "The token to clone data from"
        },
        "returns": {
          "newTokenId": "The ID of the newly cloned token"
        }
      },
      "clonePublic(address,uint256)": {
        "params": {
          "to": "Address to clone agent data to",
          "tokenId": "The token to clone data from"
        },
        "returns": {
          "newTokenId": "The ID of the newly cloned token"
        }
      },
      "dataDescriptionsOf(uint256)": {
        "params": {
          "tokenId": "The token identifier"
        },
        "returns": {
          "_0": "string[] The current data descriptions of the token"
        }
      },
      "dataHashesOf(uint256)": {
        "params": {
          "tokenId": "The token identifier"
        },
        "returns": {
          "_0": "bytes32[] The current data hashes of the token"
        }
      },
      "getAgentData(uint256)": {
        "params": {
          "tokenId": "The agent token ID"
        },
        "returns": {
          "_0": "AIAgentData Complete agent data structure"
        }
      },
      "getOwnerTokens(address)": {
        "params": {
          "owner": "The owner address"
        },
        "returns": {
          "_0": "uint256[] Array of token IDs owned by the address"
        }
      },
      "getVerifier()": {
        "returns": {
          "_0": "IDataVerifier The address of the verifier contract"
        }
      },
      "loveAgent(uint256)": {
        "params": {
          "tokenId": "The agent token to love"
        }
      },
      "mint(bytes[],string[],string,string,bool)": {
        "params": {
          "agentName": "Name of the AI agent",
          "category": "Category of the agent (AI Agent, MCP, Copy Trading Bot)",
          "descriptions": "Human-readable descriptions of the data",
          "isPublic": "Whether the agent data is public",
          "proofs": "Array of ownership proofs for the agent data"
        },
        "returns": {
          "tokenId": "The ID of the newly minted token"
        }
      },
      "name()": {
        "returns": {
          "_0": "string The name of the NFT collection"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "The token identifier"
        },
        "returns": {
          "_0": "address The current owner of the token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stakeOnAgent(uint256)": {
        "params": {
          "tokenId": "The agent token to stake on"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "string The symbol of the NFT collection"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "The token identifier"
        },
        "returns": {
          "_0": "string The metadata URI"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 Total number of minted tokens"
        }
      },
      "transfer(address,uint256,bytes[])": {
        "params": {
          "proofs": "Proofs of data availability for recipient",
          "to": "Address to transfer agent to",
          "tokenId": "The token to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPublic(address,uint256)": {
        "params": {
          "to": "Address to transfer agent to",
          "tokenId": "The token to transfer"
        }
      },
      "update(uint256,bytes[])": {
        "params": {
          "proofs": "Array of ownership proofs for new data",
          "tokenId": "The token to update"
        }
      }
    },
    "title": "ERC7857AIAgents",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorizeUsage(uint256,address)": {
        "notice": "Authorize a user to use the agent"
      },
      "authorizedUsersOf(uint256)": {
        "notice": "Get the authorized users of a token"
      },
      "clone(address,uint256,bytes[])": {
        "notice": "Clone agent data to a new token (data only, not ownership)"
      },
      "clonePublic(address,uint256)": {
        "notice": "Clone public agent (no proofs needed)"
      },
      "dataDescriptionsOf(uint256)": {
        "notice": "Get the data descriptions of a token"
      },
      "dataHashesOf(uint256)": {
        "notice": "Get the data hashes of a token"
      },
      "getAgentData(uint256)": {
        "notice": "Get agent information for marketplace"
      },
      "getOwnerTokens(address)": {
        "notice": "Get all agents owned by an address"
      },
      "getVerifier()": {
        "notice": "Get the verifier interface that this NFT uses"
      },
      "loveAgent(uint256)": {
        "notice": "Love an agent (increment love counter)"
      },
      "mint(bytes[],string[],string,string,bool)": {
        "notice": "Mint new AI Agent NFT with data ownership proofs"
      },
      "name()": {
        "notice": "Get the collection name"
      },
      "ownerOf(uint256)": {
        "notice": "Get token owner"
      },
      "stakeOnAgent(uint256)": {
        "notice": "Stake ETH on an agent (marketplace integration)"
      },
      "symbol()": {
        "notice": "Get the collection symbol"
      },
      "tokenURI(uint256)": {
        "notice": "Get the metadata URI for a specific token"
      },
      "totalSupply()": {
        "notice": "Get total supply of tokens"
      },
      "transfer(address,uint256,bytes[])": {
        "notice": "Transfer full agent data ownership to another address"
      },
      "transferPublic(address,uint256)": {
        "notice": "Transfer public agent (no proofs needed)"
      },
      "update(uint256,bytes[])": {
        "notice": "Update agent data with new ownership proofs"
      }
    },
    "notice": "Implementation of ERC-7857 AI Agents NFT with private metadata",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2302,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2401,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2406,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_agents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(AIAgentData)2398_storage)"
      },
      {
        "astId": 2412,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_authorizations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2417,
        "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
        "label": "_ownerTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(AIAgentData)2398_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC7857AIAgents.AIAgentData)",
        "numberOfBytes": "32",
        "value": "t_struct(AIAgentData)2398_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AIAgentData)2398_storage": {
        "encoding": "inplace",
        "label": "struct ERC7857AIAgents.AIAgentData",
        "members": [
          {
            "astId": 2377,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "dataHashes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2380,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "dataDescriptions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 2382,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2385,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "authorizedUsers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2387,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2389,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "isPublic",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2391,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "category",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2393,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 2395,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "totalStaked",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2397,
            "contract": "contracts/ERC7857AIAgents.sol:ERC7857AIAgents",
            "label": "loves",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}