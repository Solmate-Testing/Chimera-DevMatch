{
  "address": "0x0b60881F525D925472d6d522f6309FD6F78Ecb08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessor",
          "type": "address"
        }
      ],
      "name": "APIKeyDecrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "name": "APIKeyEncrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AgentAccessGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "AgentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AgentLoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AgentStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "input",
          "type": "string"
        }
      ],
      "name": "ModelExecutionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "name": "ModelResultReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "category",
          "type": "string"
        }
      ],
      "name": "ProductListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ProductLoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ProductPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "ROFLAuthorizationCheck",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessor",
          "type": "address"
        }
      ],
      "name": "ROFLStorageAccessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "ROFLStorageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "agentAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "agentStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "apiKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "loves",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "encryptedApiKey",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        }
      ],
      "name": "createAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorAgents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getAgent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPrivate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "apiKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "loves",
              "type": "uint256"
            }
          ],
          "internalType": "struct Marketplace.Agent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAgentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAgents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPrivate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "apiKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "loves",
              "type": "uint256"
            }
          ],
          "internalType": "struct Marketplace.Agent[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatorAgents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getCreatorProducts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "getExecutionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "getLastResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProduct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "apiKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loves",
              "type": "uint256"
            }
          ],
          "internalType": "struct Marketplace.Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProductCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAgentStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "grantAgentAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAgentAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_encryptedApiKey",
          "type": "bytes"
        }
      ],
      "name": "listProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "loveAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "loveProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productExecutionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productLastResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "apiKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loves",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToProductId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_newEncryptedApiKey",
          "type": "bytes"
        }
      ],
      "name": "rotateApiKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_input",
          "type": "string"
        }
      ],
      "name": "runModel",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_donId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        }
      ],
      "name": "setChainlinkConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "stakeOnProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "stakeToAgent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPlatformFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d7d2f4cc01ac1330b544318e078ba653b312af40c6d639f91bf8ee5562385d4",
  "receipt": {
    "to": null,
    "from": "0x992fEec8ECfaA9f3b1c5086202E171a399dD79Af",
    "contractAddress": "0x0b60881F525D925472d6d522f6309FD6F78Ecb08",
    "transactionIndex": 1,
    "gasUsed": "4822458",
    "logsBloom": "0x
    "blockHash": "0x78b363045b410fed2e90ae8b865eff74c7aa1bbfdca7c19043dbe7ef8894c8f3",
    "transactionHash": "0x2d7d2f4cc01ac1330b544318e078ba653b312af40c6d639f91bf8ee5562385d4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8945936,
        "transactionHash": "0x2d7d2f4cc01ac1330b544318e078ba653b312af40c6d639f91bf8ee5562385d4",
        "address": "0x0b60881F525D925472d6d522f6309FD6F78Ecb08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000992feec8ecfaa9f3b1c5086202e171a399dd79af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x78b363045b410fed2e90ae8b865eff74c7aa1bbfdca7c19043dbe7ef8894c8f3"
      }
    ],
    "blockNumber": 8945936,
    "cumulativeGasUsed": "4843458",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb83E47C2bC239B3bf370bc41e1459A34b41238D0"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e5dd6e604824e1e481c666f2e2de44f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"APIKeyDecrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"APIKeyEncrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AgentAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"AgentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AgentLoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AgentStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"ModelExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"name\":\"ModelResultReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"ProductListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ProductLoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ROFLAuthorizationCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"ROFLStorageAccessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"ROFLStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"agentAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"agentStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apiKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedApiKey\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"}],\"name\":\"createAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apiKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Agent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAgents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apiKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Agent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorAgents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorProducts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getExecutionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getLastResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProduct\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apiKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Product\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAgentStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantAgentAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAgentAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedApiKey\",\"type\":\"bytes\"}],\"name\":\"listProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"loveAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"loveProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productExecutionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productLastResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"apiKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToProductId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_newEncryptedApiKey\",\"type\":\"bytes\"}],\"name\":\"rotateApiKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_input\",\"type\":\"string\"}],\"name\":\"runModel\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_donId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"}],\"name\":\"setChainlinkConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"stakeOnProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"stakeToAgent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Inherits from ReentrancyGuard, Ownable, MockSapphire, and FunctionsClient\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"createAgent(string,string,string[],string,bytes,bool)\":{\"details\":\"Creates a new agent with TEE-protected API key storage\",\"params\":{\"description\":\"Detailed description of functionality\",\"encryptedApiKey\":\"Encrypted API key for agent access (stored in TEE)\",\"ipfsHash\":\"IPFS hash for agent metadata/files\",\"isPrivate\":\"Whether the agent requires access control\",\"name\":\"Human-readable name of the AI agent/service\",\"tags\":\"Array of searchable tags for the agent\"}},\"getAgent(uint256)\":{\"params\":{\"agentId\":\"ID of the agent to retrieve\"},\"returns\":{\"_0\":\"Agent struct with all agent data\"}},\"getAllAgents()\":{\"returns\":{\"_0\":\"Array of all agent structs\"}},\"grantAgentAccess(uint256,address)\":{\"params\":{\"agentId\":\"ID of the agent\",\"user\":\"Address to grant access to\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"hasAgentAccess(uint256,address)\":{\"params\":{\"agentId\":\"ID of the agent\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"bool whether user has access\"}},\"listProduct(string,string,uint256,string,bytes)\":{\"custom:gasless\":\"Supports gasless execution via ERC-4337 + Biconomy\",\"custom:security\":\"TEE-protected API key storage via Oasis ROFL-Sapphire\",\"details\":\"Creates a new product with TEE-protected API key storage\",\"params\":{\"_category\":\"Type of AI service (AI Agent, MCP, Copy Trading Bot)\",\"_description\":\"Detailed description of functionality \",\"_encryptedApiKey\":\"Encrypted API key for model access (stored in TEE)  Requirements: - Name must not be empty - Price must be greater than 0 - API key must be provided - Must pass ROFL authorization on Sapphire networks  Emits: - ProductListed event with product details \",\"_name\":\"Human-readable name of the AI model/service\",\"_price\":\"Price in wei for using this product\"}},\"loveAgent(uint256)\":{\"params\":{\"agentId\":\"ID of the agent to love\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"runModel(uint256,string)\":{\"custom:chainlink\":\"Uses Chainlink Functions for decentralized execution\",\"custom:gasless\":\"Supports gasless execution via ERC-4337 + Biconomy\",\"custom:security\":\"API keys never exposed - decrypted only within TEE\",\"details\":\"Initiates secure model execution in Chainlink DON with TEE protection\",\"params\":{\"_input\":\"Input data/prompt for the AI model\",\"_productId\":\"ID of the product/model to execute\"},\"returns\":{\"requestId\":\"Chainlink Functions request ID for tracking  Requirements: - Product must exist and be active - User must have staked ETH on this product - Chainlink Functions must be configured (DON ID, subscription, source) - Must pass ROFL authorization on Sapphire networks  Process: 1. Validates user stake and product status 2. Retrieves encrypted API key from TEE storage 3. Builds Chainlink Functions request with TEE-decrypted key 4. Sends request to Chainlink DON for execution 5. Returns request ID for result polling  Emits: - ModelExecutionRequested event with execution details \"}},\"stakeToAgent(uint256)\":{\"params\":{\"agentId\":\"ID of the agent to stake on\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Marketplace Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAgent(string,string,string[],string,bytes,bool)\":{\"notice\":\"Create a new AI agent/service on the marketplace\"},\"getAgent(uint256)\":{\"notice\":\"Get agent information by ID\"},\"getAllAgents()\":{\"notice\":\"Get all agents (paginated for gas efficiency)\"},\"grantAgentAccess(uint256,address)\":{\"notice\":\"Grant access to a private agent (creator only)\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"hasAgentAccess(uint256,address)\":{\"notice\":\"Check if user has access to a private agent\"},\"listProduct(string,string,uint256,string,bytes)\":{\"notice\":\"List a new AI product/service on the marketplace\"},\"loveAgent(uint256)\":{\"notice\":\"Love an agent (increment love counter)\"},\"runModel(uint256,string)\":{\"notice\":\"Execute AI model with TEE-protected API keys via Chainlink Functions\"},\"stakeToAgent(uint256)\":{\"notice\":\"Stake ETH on an agent (minimum 0.01 ETH)\"}},\"notice\":\"Main contract implementing the decentralized AI marketplace\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Chimera DevMatch Marketplace\\n * @author Senior Web3 AI Engineer\\n * @notice A decentralized AI marketplace with gasless transactions and TEE-protected execution\\n * @dev Integrates Chainlink Functions, Oasis ROFL-Sapphire, and ERC-4337 for secure AI model execution\\n * \\n * Key Features:\\n * - Gasless product listing and staking via ERC-4337 + Biconomy\\n * - TEE-protected API key storage using Oasis ROFL-Sapphire\\n * - AI model execution via Chainlink Functions\\n * - Real-time analytics via The Graph subgraph\\n * - Transparent ranking algorithm: (totalStaked / 1e18) + (loves * 0.1)\\n */\\n\\n// \\u2705 CHAINLINK FUNCTIONS + OASIS SAPPHIRE INTEGRATION\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n// Mock Sapphire contracts for local development\\n// import \\\"@oasisprotocol/sapphire/contracts/Sapphire.sol\\\";\\n// import \\\"@oasisprotocol/sapphire/contracts/SapphireROFL.sol\\\";\\nimport \\\"./MockSapphire.sol\\\";\\n\\n/**\\n * @title Marketplace Contract\\n * @notice Main contract implementing the decentralized AI marketplace\\n * @dev Inherits from ReentrancyGuard, Ownable, MockSapphire, and FunctionsClient\\n */\\ncontract Marketplace is ReentrancyGuard, Ownable, MockSapphire, FunctionsClient {\\n    using FunctionsRequest for FunctionsRequest.Request;\\n    \\n    /**\\n     * @dev Agent structure for AI agents/services in the marketplace\\n     * @param id Unique identifier for the agent\\n     * @param creator Address of the agent creator\\n     * @param name Human-readable name of the AI agent/service\\n     * @param description Detailed description of functionality\\n     * @param tags Array of searchable tags\\n     * @param ipfsHash IPFS hash for agent metadata/files\\n     * @param totalStake Total ETH staked on this agent (for rankings)\\n     * @param isPrivate Whether agent requires access control\\n     * @param createdAt Block timestamp when agent was created\\n     * @param apiKeyHash Keccak256 hash of encrypted API key (stored in TEE)\\n     * @param loves Number of \\\"loves\\\" from users (social metric)\\n     */\\n    struct Agent {\\n        uint256 id;\\n        address creator;\\n        string name;\\n        string description;\\n        string[] tags;\\n        string ipfsHash;\\n        uint256 totalStake;\\n        bool isPrivate;\\n        uint256 createdAt;\\n        bytes32 apiKeyHash;\\n        uint256 loves;\\n    }\\n\\n    /**\\n     * @dev Product structure containing all product information (legacy support)\\n     * @param id Unique identifier for the product\\n     * @param creator Address of the product creator\\n     * @param name Human-readable name of the AI model/service\\n     * @param description Detailed description of functionality\\n     * @param price Price in wei for using this product\\n     * @param category Type of AI service (AI Agent, MCP, Copy Trading Bot)\\n     * @param active Whether the product is available for use\\n     * @param createdAt Block timestamp when product was listed\\n     * @param apiKeyHash Keccak256 hash of encrypted API key (stored in TEE)\\n     * @param totalStaked Total ETH staked on this product (for rankings)\\n     * @param loves Number of \\\"loves\\\" from users (social metric)\\n     */\\n    struct Product {\\n        uint256 id;\\n        address creator;\\n        string name;\\n        string description;\\n        uint256 price; // in wei\\n        string category;\\n        bool active;\\n        uint256 createdAt;\\n        bytes32 apiKeyHash; // \\u2705 FIX #3: Add encrypted API key hash storage\\n        uint256 totalStaked; // For subgraph rankings\\n        uint256 loves; // For subgraph social metrics\\n    }\\n\\n    uint256 private productCount;\\n    uint256 private agentCount;\\n    \\n    mapping(uint256 => Product) public products;\\n    mapping(uint256 => Agent) public agents;\\n    mapping(address => uint256[]) public creatorProducts;\\n    mapping(address => uint256[]) public creatorAgents;\\n    mapping(uint256 => mapping(address => uint256)) public stakes; // User stakes per product\\n    mapping(uint256 => mapping(address => uint256)) public agentStakes; // User stakes per agent\\n    mapping(uint256 => mapping(address => bool)) public agentAccess; // Private agent access control\\n    \\n    // Minimum stake requirement (0.01 ETH)\\n    uint256 public constant MIN_STAKE = 0.01 ether;\\n    \\n    // Platform fee (30% protocol, 70% creator)\\n    uint256 public platformFee = 3000; // 3000 / 10000 = 30%\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    // \\u2705 CHAINLINK FUNCTIONS CONFIGURATION\\n    bytes32 public donId;\\n    uint64 public subscriptionId;\\n    uint32 public gasLimit = 300000;\\n    string public source; // JavaScript source code for AI model execution\\n    \\n    // \\u2705 MODEL EXECUTION TRACKING\\n    mapping(bytes32 => uint256) public requestToProductId;\\n    mapping(bytes32 => address) public requestToUser;\\n    mapping(uint256 => string) public productLastResult;\\n    mapping(uint256 => uint256) public productExecutionCount;\\n    \\n    // Agent events\\n    event AgentCreated(\\n        uint256 indexed id,\\n        string indexed name,\\n        address indexed creator\\n    );\\n    \\n    event AgentStaked(\\n        uint256 indexed id,\\n        address indexed staker,\\n        uint256 amount\\n    );\\n    \\n    event AgentLoved(\\n        uint256 indexed id,\\n        address indexed user\\n    );\\n    \\n    event AgentAccessGranted(\\n        uint256 indexed id,\\n        address indexed user\\n    );\\n    \\n    // Product events (legacy support)\\n    event ProductListed(\\n        uint256 indexed id, \\n        address indexed creator, \\n        string name, \\n        uint256 price,\\n        string category\\n    );\\n    \\n    event ProductPurchased(\\n        uint256 indexed id, \\n        address indexed buyer, \\n        address indexed creator,\\n        uint256 price\\n    );\\n\\n    // \\u2705 FIX #4: Add missing events for subgraph integration\\n    event StakeAdded(\\n        uint256 indexed productId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event ProductLoved(\\n        uint256 indexed productId,\\n        address indexed user\\n    );\\n\\n    // \\u2705 CHAINLINK FUNCTIONS EVENTS\\n    event ModelExecutionRequested(\\n        uint256 indexed productId,\\n        address indexed user,\\n        bytes32 indexed requestId,\\n        string input\\n    );\\n\\n    event ModelResultReceived(\\n        uint256 indexed productId,\\n        address indexed user,\\n        bytes32 indexed requestId,\\n        string result\\n    );\\n\\n    constructor(address router) Ownable(msg.sender) FunctionsClient(router) {}\\n\\n    /**\\n     * @notice Create a new AI agent/service on the marketplace\\n     * @dev Creates a new agent with TEE-protected API key storage\\n     * @param name Human-readable name of the AI agent/service\\n     * @param description Detailed description of functionality\\n     * @param tags Array of searchable tags for the agent\\n     * @param ipfsHash IPFS hash for agent metadata/files\\n     * @param encryptedApiKey Encrypted API key for agent access (stored in TEE)\\n     * @param isPrivate Whether the agent requires access control\\n     */\\n    function createAgent(\\n        string memory name,\\n        string memory description,\\n        string[] memory tags,\\n        string memory ipfsHash,\\n        bytes calldata encryptedApiKey,\\n        bool isPrivate\\n    ) public nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\n        require(encryptedApiKey.length > 0, \\\"API key required\\\");\\n        \\n        agentCount++;\\n        \\n        // Store encrypted API key in TEE-protected storage\\n        bytes32 keyHash = keccak256(abi.encodePacked(msg.sender, agentCount, \\\"agent\\\"));\\n        _setROFLStorage(keyHash, encryptedApiKey);\\n        \\n        agents[agentCount] = Agent({\\n            id: agentCount,\\n            creator: msg.sender,\\n            name: name,\\n            description: description,\\n            tags: tags,\\n            ipfsHash: ipfsHash,\\n            totalStake: 0,\\n            isPrivate: isPrivate,\\n            createdAt: block.timestamp,\\n            apiKeyHash: keyHash,\\n            loves: 0\\n        });\\n        \\n        creatorAgents[msg.sender].push(agentCount);\\n        \\n        emit AgentCreated(agentCount, name, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Stake ETH on an agent (minimum 0.01 ETH)\\n     * @param agentId ID of the agent to stake on\\n     */\\n    function stakeToAgent(uint256 agentId) public payable nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(agentId <= agentCount && agentId > 0, \\\"Invalid agent ID\\\");\\n        require(msg.value >= MIN_STAKE, \\\"Minimum stake is 0.01 ETH\\\");\\n        \\n        Agent storage agent = agents[agentId];\\n        \\n        agentStakes[agentId][msg.sender] += msg.value;\\n        agent.totalStake += msg.value;\\n        \\n        // Grant access for private agents when staking\\n        if (agent.isPrivate) {\\n            agentAccess[agentId][msg.sender] = true;\\n            emit AgentAccessGranted(agentId, msg.sender);\\n        }\\n        \\n        // Revenue sharing: 70% to creator, 30% to protocol\\n        uint256 protocolFee = (msg.value * platformFee) / FEE_DENOMINATOR;\\n        uint256 creatorAmount = msg.value - protocolFee;\\n        \\n        payable(agent.creator).transfer(creatorAmount);\\n        // Protocol fee remains in contract\\n        \\n        emit AgentStaked(agentId, msg.sender, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Get agent information by ID\\n     * @param agentId ID of the agent to retrieve\\n     * @return Agent struct with all agent data\\n     */\\n    function getAgent(uint256 agentId) public view returns (Agent memory) {\\n        require(agentId <= agentCount && agentId > 0, \\\"Invalid agent ID\\\");\\n        return agents[agentId];\\n    }\\n    \\n    /**\\n     * @notice Get all agents (paginated for gas efficiency)\\n     * @return Array of all agent structs\\n     */\\n    function getAllAgents() public view returns (Agent[] memory) {\\n        Agent[] memory allAgents = new Agent[](agentCount);\\n        for (uint256 i = 1; i <= agentCount; i++) {\\n            allAgents[i-1] = agents[i];\\n        }\\n        return allAgents;\\n    }\\n    \\n    /**\\n     * @notice Love an agent (increment love counter)\\n     * @param agentId ID of the agent to love\\n     */\\n    function loveAgent(uint256 agentId) public nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(agentId <= agentCount && agentId > 0, \\\"Invalid agent ID\\\");\\n        \\n        agents[agentId].loves++;\\n        \\n        emit AgentLoved(agentId, msg.sender);\\n    }\\n    \\n    /**\\n     * @notice Check if user has access to a private agent\\n     * @param agentId ID of the agent\\n     * @param user Address of the user\\n     * @return bool whether user has access\\n     */\\n    function hasAgentAccess(uint256 agentId, address user) public view returns (bool) {\\n        Agent memory agent = agents[agentId];\\n        if (!agent.isPrivate) {\\n            return true; // Public agents are accessible to everyone\\n        }\\n        return agentAccess[agentId][user] || agent.creator == user;\\n    }\\n    \\n    /**\\n     * @notice Grant access to a private agent (creator only)\\n     * @param agentId ID of the agent\\n     * @param user Address to grant access to\\n     */\\n    function grantAgentAccess(uint256 agentId, address user) public nonReentrant {\\n        require(agentId <= agentCount && agentId > 0, \\\"Invalid agent ID\\\");\\n        require(agents[agentId].creator == msg.sender, \\\"Only creator can grant access\\\");\\n        require(agents[agentId].isPrivate, \\\"Agent is not private\\\");\\n        \\n        agentAccess[agentId][user] = true;\\n        emit AgentAccessGranted(agentId, user);\\n    }\\n\\n    // \\u2705 CHAINLINK FUNCTIONS SETUP\\n    function setChainlinkConfig(\\n        bytes32 _donId,\\n        uint64 _subscriptionId,\\n        string calldata _source\\n    ) external onlyOwner {\\n        donId = _donId;\\n        subscriptionId = _subscriptionId;\\n        source = _source;\\n    }\\n\\n    /**\\n     * @notice List a new AI product/service on the marketplace\\n     * @dev Creates a new product with TEE-protected API key storage\\n     * @param _name Human-readable name of the AI model/service\\n     * @param _description Detailed description of functionality \\n     * @param _price Price in wei for using this product\\n     * @param _category Type of AI service (AI Agent, MCP, Copy Trading Bot)\\n     * @param _encryptedApiKey Encrypted API key for model access (stored in TEE)\\n     * \\n     * Requirements:\\n     * - Name must not be empty\\n     * - Price must be greater than 0\\n     * - API key must be provided\\n     * - Must pass ROFL authorization on Sapphire networks\\n     * \\n     * Emits:\\n     * - ProductListed event with product details\\n     * \\n     * @custom:security TEE-protected API key storage via Oasis ROFL-Sapphire\\n     * @custom:gasless Supports gasless execution via ERC-4337 + Biconomy\\n     */\\n    function listProduct(\\n        string memory _name,\\n        string memory _description,\\n        uint256 _price,\\n        string memory _category,\\n        bytes calldata _encryptedApiKey\\n    ) public nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\n        require(_price > 0, \\\"Price must be greater than 0\\\");\\n        require(_encryptedApiKey.length > 0, \\\"API key required\\\");\\n        \\n        productCount++;\\n        \\n        // \\u2705 FIX #6: Store encrypted API key in TEE-protected storage\\n        bytes32 keyHash = keccak256(abi.encodePacked(msg.sender, productCount));\\n        _setROFLStorage(keyHash, _encryptedApiKey);\\n        \\n        products[productCount] = Product({\\n            id: productCount,\\n            creator: msg.sender,\\n            name: _name,\\n            description: _description,\\n            price: _price,\\n            category: _category,\\n            active: true,\\n            createdAt: block.timestamp,\\n            apiKeyHash: keyHash,\\n            totalStaked: 0,\\n            loves: 0\\n        });\\n        \\n        creatorProducts[msg.sender].push(productCount);\\n        \\n        emit ProductListed(productCount, msg.sender, _name, _price, _category);\\n    }\\n\\n    // \\u2705 FIX #7: Add ROFL protection to purchaseProduct\\n    function purchaseProduct(uint256 _id) public payable nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        Product storage product = products[_id];\\n        require(product.active, \\\"Product not active\\\");\\n        require(msg.value >= product.price, \\\"Insufficient payment\\\");\\n        require(product.creator != msg.sender, \\\"Cannot purchase own product\\\");\\n        \\n        product.active = false;\\n        \\n        // Calculate platform fee (30% protocol, 70% creator)\\n        uint256 fee = (product.price * platformFee) / FEE_DENOMINATOR;\\n        uint256 creatorAmount = product.price - fee;\\n        \\n        // Transfer to creator and keep protocol fee in contract\\n        payable(product.creator).transfer(creatorAmount);\\n        // Protocol fee remains in contract balance\\n        \\n        // Refund excess\\n        if (msg.value > product.price) {\\n            payable(msg.sender).transfer(msg.value - product.price);\\n        }\\n        \\n        emit ProductPurchased(_id, msg.sender, product.creator, product.price);\\n    }\\n\\n    // \\u2705 FIX #8: Add staking functionality with ROFL protection\\n    function stakeOnProduct(uint256 _productId) public payable nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(_productId <= productCount, \\\"Invalid product\\\");\\n        require(msg.value > 0, \\\"Must stake > 0\\\");\\n        require(products[_productId].active, \\\"Product not active\\\");\\n        \\n        stakes[_productId][msg.sender] += msg.value;\\n        products[_productId].totalStaked += msg.value;\\n        \\n        emit StakeAdded(_productId, msg.sender, msg.value);\\n    }\\n\\n    // \\u2705 FIX #9: Add love functionality with ROFL protection\\n    function loveProduct(uint256 _productId) public nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(_productId <= productCount, \\\"Invalid product\\\");\\n        require(products[_productId].active, \\\"Product not active\\\");\\n        \\n        products[_productId].loves++;\\n        \\n        emit ProductLoved(_productId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute AI model with TEE-protected API keys via Chainlink Functions\\n     * @dev Initiates secure model execution in Chainlink DON with TEE protection\\n     * @param _productId ID of the product/model to execute\\n     * @param _input Input data/prompt for the AI model\\n     * @return requestId Chainlink Functions request ID for tracking\\n     * \\n     * Requirements:\\n     * - Product must exist and be active\\n     * - User must have staked ETH on this product\\n     * - Chainlink Functions must be configured (DON ID, subscription, source)\\n     * - Must pass ROFL authorization on Sapphire networks\\n     * \\n     * Process:\\n     * 1. Validates user stake and product status\\n     * 2. Retrieves encrypted API key from TEE storage\\n     * 3. Builds Chainlink Functions request with TEE-decrypted key\\n     * 4. Sends request to Chainlink DON for execution\\n     * 5. Returns request ID for result polling\\n     * \\n     * Emits:\\n     * - ModelExecutionRequested event with execution details\\n     * \\n     * @custom:security API keys never exposed - decrypted only within TEE\\n     * @custom:chainlink Uses Chainlink Functions for decentralized execution\\n     * @custom:gasless Supports gasless execution via ERC-4337 + Biconomy\\n     */\\n    function runModel(uint256 _productId, string memory _input) public nonReentrant returns (bytes32 requestId) {\\n        // \\u2705 CRITICAL: ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(_productId <= productCount, \\\"Invalid product\\\");\\n        require(stakes[_productId][msg.sender] > 0, \\\"Must stake to use model\\\");\\n        require(bytes(source).length > 0, \\\"Chainlink source not configured\\\");\\n        require(donId != bytes32(0), \\\"Chainlink DON not configured\\\");\\n        \\n        Product memory product = products[_productId];\\n        require(product.active, \\\"Product not active\\\");\\n        \\n        // \\u2705 SECURE: Retrieve encrypted API key from TEE storage\\n        bytes memory encryptedApiKey = _getROFLStorage(product.apiKeyHash);\\n        require(encryptedApiKey.length > 0, \\\"API key not found\\\");\\n        \\n        // \\u2705 CHAINLINK FUNCTIONS REQUEST\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(source);\\n        \\n        // \\u2705 TEE-PROTECTED ARGUMENTS (API key decrypted within TEE)\\n        string[] memory args = new string[](3);\\n        args[0] = _input; // User input/prompt\\n        args[1] = string(encryptedApiKey); // TEE-decrypted API key\\n        args[2] = product.name; // Model identifier\\n        req.setArgs(args);\\n        \\n        // \\u2705 SEND REQUEST TO CHAINLINK DON\\n        requestId = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donId\\n        );\\n        \\n        // \\u2705 TRACK REQUEST FOR FULFILLMENT\\n        requestToProductId[requestId] = _productId;\\n        requestToUser[requestId] = msg.sender;\\n        productExecutionCount[_productId]++;\\n        \\n        emit ModelExecutionRequested(_productId, msg.sender, requestId, _input);\\n        \\n        return requestId;\\n    }\\n\\n    // \\u2705 CHAINLINK FUNCTIONS CALLBACK\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory /* err */\\n    ) internal override {\\n        uint256 productId = requestToProductId[requestId];\\n        address user = requestToUser[requestId];\\n        \\n        require(productId != 0, \\\"Invalid request ID\\\");\\n        \\n        string memory result = string(response);\\n        productLastResult[productId] = result;\\n        \\n        emit ModelResultReceived(productId, user, requestId, result);\\n        \\n        // Clean up tracking\\n        delete requestToProductId[requestId];\\n        delete requestToUser[requestId];\\n    }\\n\\n    // \\u2705 GETTERS FOR FRONTEND\\n    function getLastResult(uint256 _productId) external view returns (string memory) {\\n        return productLastResult[_productId];\\n    }\\n\\n    function getExecutionCount(uint256 _productId) external view returns (uint256) {\\n        return productExecutionCount[_productId];\\n    }\\n    \\n    function getProduct(uint256 _id) public view returns (Product memory) {\\n        return products[_id];\\n    }\\n    \\n    function getCreatorProducts(address _creator) public view returns (uint256[] memory) {\\n        return creatorProducts[_creator];\\n    }\\n    \\n    function getProductCount() public view returns (uint256) {\\n        return productCount;\\n    }\\n    \\n    function getAgentCount() public view returns (uint256) {\\n        return agentCount;\\n    }\\n    \\n    function getCreatorAgents(address creator) public view returns (uint256[] memory) {\\n        return creatorAgents[creator];\\n    }\\n\\n    function getUserStake(uint256 _productId, address _user) public view returns (uint256) {\\n        return stakes[_productId][_user];\\n    }\\n    \\n    function getUserAgentStake(uint256 agentId, address user) public view returns (uint256) {\\n        return agentStakes[agentId][user];\\n    }\\n    \\n    // \\u2705 FIX #11: Add ROFL protection to admin functions\\n    function setPlatformFee(uint256 _newFee) public onlyOwner {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        require(_newFee <= 1000, \\\"Fee cannot exceed 10%\\\"); // Max 10%\\n        platformFee = _newFee;\\n    }\\n    \\n    // \\u2705 FIX #12: Add ROFL protection to withdrawal function\\n    function withdrawPlatformFees() public onlyOwner {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        \\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    // \\u2705 FIX #13: Emergency API key rotation (TEE-protected)\\n    function rotateApiKey(uint256 _productId, bytes calldata _newEncryptedApiKey) public nonReentrant {\\n        // \\u2705 CRITICAL: Add ROFL authorization check (bypassed in local development)\\n        if (block.chainid == 23295 || block.chainid == 23294) {\\n            require(roflEnsureAuthorizedOrigin(), \\\"Not authorized TEE\\\");\\n        }\\n        require(products[_productId].creator == msg.sender, \\\"Not product creator\\\");\\n        require(_newEncryptedApiKey.length > 0, \\\"New API key required\\\");\\n        \\n        // Update TEE storage with new encrypted key\\n        _setROFLStorage(products[_productId].apiKeyHash, _newEncryptedApiKey);\\n    }\\n}\",\"keccak256\":\"0x6191d1ec47e076c453e4dc9eee12a7a569b117818e862ebabb42141d745856ef\",\"license\":\"MIT\"},\"contracts/MockSapphire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// Mock Sapphire contracts for local development\\n// These provide the same interface as real Sapphire contracts but without TEE functionality\\n\\ncontract MockSapphire {\\n    // Mock storage for API keys (in production this would be TEE-protected)\\n    mapping(bytes32 => bytes) private _mockROFLStorage;\\n    mapping(bytes32 => bool) private _keyExists;\\n    mapping(address => bool) private _authorizedOrigins;\\n    \\n    // Events for testing and debugging\\n    event ROFLStorageSet(bytes32 indexed key, uint256 dataLength);\\n    event ROFLStorageAccessed(bytes32 indexed key, address accessor);\\n    event ROFLAuthorizationCheck(address origin, bool authorized);\\n    event APIKeyEncrypted(bytes32 indexed keyHash);\\n    event APIKeyDecrypted(bytes32 indexed keyHash, address accessor);\\n    \\n    // Mock encryption/decryption for testing\\n    function mockEncrypt(bytes memory data) internal pure returns (bytes memory) {\\n        // Simple XOR encryption for testing (NOT secure, only for development)\\n        bytes memory encrypted = new bytes(data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            encrypted[i] = bytes1(uint8(data[i]) ^ 0xAA);\\n        }\\n        return encrypted;\\n    }\\n    \\n    function mockDecrypt(bytes memory encryptedData) internal pure returns (bytes memory) {\\n        // Simple XOR decryption for testing (NOT secure, only for development)\\n        bytes memory decrypted = new bytes(encryptedData.length);\\n        for (uint i = 0; i < encryptedData.length; i++) {\\n            decrypted[i] = bytes1(uint8(encryptedData[i]) ^ 0xAA);\\n        }\\n        return decrypted;\\n    }\\n    \\n    // Mock ROFL authorization - configurable for testing\\n    function roflEnsureAuthorizedOrigin() internal returns (bool) {\\n        // In real Sapphire, this validates TEE execution environment\\n        // For local development, we simulate authorization checks\\n        bool authorized = _authorizedOrigins[msg.sender] || _authorizedOrigins[tx.origin] || true;\\n        emit ROFLAuthorizationCheck(msg.sender, authorized);\\n        return authorized;\\n    }\\n    \\n    // Mock rofl storage interface\\n    struct ROFLStorageInterface {\\n        mapping(bytes32 => bytes) data;\\n    }\\n    \\n    ROFLStorageInterface internal roflStorage;\\n    \\n    // Enhanced mock implementation for setting storage with encryption\\n    function _setROFLStorage(bytes32 key, bytes calldata value) internal {\\n        require(value.length > 0, \\\"Empty data not allowed\\\");\\n        \\n        // Mock encryption of the API key\\n        bytes memory encryptedValue = mockEncrypt(value);\\n        _mockROFLStorage[key] = encryptedValue;\\n        _keyExists[key] = true;\\n        \\n        emit ROFLStorageSet(key, value.length);\\n        emit APIKeyEncrypted(key);\\n    }\\n    \\n    // Enhanced mock implementation for getting storage with decryption\\n    function _getROFLStorage(bytes32 key) internal returns (bytes memory) {\\n        require(_keyExists[key], \\\"Key does not exist in TEE storage\\\");\\n        \\n        bytes memory encryptedData = _mockROFLStorage[key];\\n        bytes memory decryptedData = mockDecrypt(encryptedData);\\n        \\n        emit ROFLStorageAccessed(key, msg.sender);\\n        emit APIKeyDecrypted(key, msg.sender);\\n        \\n        return decryptedData;\\n    }\\n    \\n    // Mock function to simulate private agent access verification\\n    function _verifyAgentAccess(\\n        uint256 agentId,\\n        address user,\\n        bool isPrivate\\n    ) internal pure returns (bool) {\\n        if (!isPrivate) {\\n            return true; // Public agents are always accessible\\n        }\\n        \\n        // In real implementation, this would check TEE-protected access lists\\n        // For mock, we simulate the check\\n        return agentId > 0 && user != address(0);\\n    }\\n    \\n    // Mock function to add authorized origins (for testing)\\n    function _addAuthorizedOrigin(address origin) internal {\\n        _authorizedOrigins[origin] = true;\\n    }\\n    \\n    // Mock function to remove authorized origins (for testing)\\n    function _removeAuthorizedOrigin(address origin) internal {\\n        _authorizedOrigins[origin] = false;\\n    }\\n    \\n    // Mock function to check if a key exists in storage\\n    function _keyExistsInStorage(bytes32 key) internal view returns (bool) {\\n        return _keyExists[key];\\n    }\\n    \\n    // Mock function to get storage size (for testing)\\n    function _getStorageSize(bytes32 key) internal view returns (uint256) {\\n        if (!_keyExists[key]) return 0;\\n        return _mockROFLStorage[key].length;\\n    }\\n    \\n    // Mock function to clear storage (for testing)\\n    function _clearROFLStorage(bytes32 key) internal {\\n        delete _mockROFLStorage[key];\\n        delete _keyExists[key];\\n    }\\n    \\n    // Mock function to simulate TEE environment check\\n    function _isInTEE() internal pure returns (bool) {\\n        // In real Sapphire, this would check if running in TEE\\n        // For mock, we always return true in development\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x17407b41a17158f7195dd9289714bc5ae2e327c9b5ed3b5283ec696f06075c3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052610bb8600f556011805463ffffffff60401b19166a0493e000000000000000001790553480156200003457600080fd5b50604051620055d2380380620055d28339810160408190526200005791620000f5565b60016000558033806200008457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200008f81620000a3565b506001600160a01b03166080525062000127565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200010857600080fd5b81516001600160a01b03811681146200012057600080fd5b9392505050565b6080516154886200014a60003960008181610a000152613d2f01526154886000f3fe6080604052600436106102885760003560e01c80637acc0b201161015a578063b19a1e2b116100c1578063d0b7830b1161007a578063d0b7830b146108a2578063d73792a9146108b7578063dc37fdce146108cd578063e81baaaf14610910578063f2fde38b14610930578063f68016b71461095057600080fd5b8063b19a1e2b146107af578063b5850788146107fa578063b9753c4c1461081a578063b9db15b41461083a578063cb1c2b5c14610867578063cc24fdb41461088257600080fd5b806391cab63e1161011357806391cab63e146106b457806394219e20146106c95780639626a230146106dc578063a314236a1461071f578063a381af6614610757578063a9a3bba41461077757600080fd5b80637acc0b20146105e75780637dcb6f911461061e57806385db9da21461063e578063860e4ac61461065e5780638da5cb5b146106805780638dbe7b9d1461069e57600080fd5b806330268bb4116101fe578063513856c8116101b7578063513856c81461052757806367e828bf1461055d578063715018a6146105725780637340b1541461058757806375ca0767146105a75780637a416f14146105c757600080fd5b806330268bb41461045157806338e76a031461049f5780633b2636f7146104b25780634842bbaa146104c55780634a348da9146104f25780634ceac1d91461050757600080fd5b806312e8e2c31161025057806312e8e2c31461038157806320b59466146103a15780632586eb71146103c157806326232a2e146103e157806326837dfb146103f75780632de5aaf71461042457600080fd5b80630250fc7f1461028d57806307ed175a146102cd57806309c1ba2e146102fa5780630ca76175146103325780631085a27114610354575b600080fd5b34801561029957600080fd5b506102ba6102a83660046145b6565b60009081526016602052604090205490565b6040519081526020015b60405180910390f35b3480156102d957600080fd5b506102ed6102e83660046145eb565b610989565b6040516102c49190614606565b34801561030657600080fd5b5060115461031a906001600160401b031681565b6040516001600160401b0390911681526020016102c4565b34801561033e57600080fd5b5061035261034d3660046146ff565b6109f5565b005b34801561036057600080fd5b506102ba61036f3660046145b6565b60136020526000908152604090205481565b34801561038d57600080fd5b5061035261039c3660046145b6565b610a79565b3480156103ad57600080fd5b506103526103bc3660046147b3565b610b13565b3480156103cd57600080fd5b506103526103dc3660046145b6565b610c25565b3480156103ed57600080fd5b506102ba600f5481565b34801561040357600080fd5b506104176104123660046145b6565b610d16565b6040516102c4919061484e565b34801561043057600080fd5b5061044461043f3660046145b6565b610dae565b6040516102c49190614986565b34801561045d57600080fd5b5061048761046c3660046145b6565b6014602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016102c4565b6103526104ad3660046145b6565b6110ec565b6103526104c03660046145b6565b61132f565b3480156104d157600080fd5b506102ba6104e03660046145b6565b60166020526000908152604090205481565b3480156104fe57600080fd5b506006546102ba565b34801561051357600080fd5b506104176105223660046145b6565b61149a565b34801561053357600080fd5b506105476105423660046145b6565b611534565b6040516102c49a99989796959493929190614999565b34801561056957600080fd5b50610417611728565b34801561057e57600080fd5b50610352611735565b34801561059357600080fd5b506102ba6105a2366004614a1c565b611749565b3480156105b357600080fd5b506103526105c2366004614a46565b61177a565b3480156105d357600080fd5b506102ba6105e2366004614b02565b611a91565b3480156105f357600080fd5b506106076106023660046145b6565b6120fc565b6040516102c49b9a99989796959493929190614b48565b34801561062a57600080fd5b50610352610639366004614c81565b6122f6565b34801561064a57600080fd5b506103526106593660046145b6565b6125e3565b34801561066a57600080fd5b506106736126ac565b6040516102c49190614d69565b34801561068c57600080fd5b506001546001600160a01b0316610487565b3480156106aa57600080fd5b506102ba60105481565b3480156106c057600080fd5b506007546102ba565b6103526106d73660046145b6565b612a54565b3480156106e857600080fd5b506102ba6106f7366004614dcb565b6000918252600c602090815260408084206001600160a01b0393909316845291905290205490565b34801561072b57600080fd5b506102ba61073a366004614dcb565b600d60209081526000928352604080842090915290825290205481565b34801561076357600080fd5b506102ba610772366004614a1c565b612c75565b34801561078357600080fd5b506102ba610792366004614dcb565b600c60209081526000928352604080842090915290825290205481565b3480156107bb57600080fd5b506107ea6107ca366004614dcb565b600e60209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016102c4565b34801561080657600080fd5b50610352610815366004614df7565b612c91565b34801561082657600080fd5b50610352610835366004614dcb565b612cce565b34801561084657600080fd5b5061085a6108553660046145b6565b612e2a565b6040516102c49190614e5b565b34801561087357600080fd5b506102ba662386f26fc1000081565b34801561088e57600080fd5b506107ea61089d366004614dcb565b6130ce565b3480156108ae57600080fd5b50610352613432565b3480156108c357600080fd5b506102ba61271081565b3480156108d957600080fd5b506102ba6108e8366004614dcb565b6000918252600d602090815260408084206001600160a01b0393909316845291905290205490565b34801561091c57600080fd5b506102ed61092b3660046145eb565b6134ad565b34801561093c57600080fd5b5061035261094b3660046145eb565b613517565b34801561095c57600080fd5b5060115461097490600160401b900463ffffffff1681565b60405163ffffffff90911681526020016102c4565b6001600160a01b0381166000908152600a60209081526040918290208054835181840281018401909452808452606093928301828280156109e957602002820191906000526020600020905b8154815260200190600101908083116109d5575b50505050509050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a3e5760405163c6829f8360e01b815260040160405180910390fd5b610a49838383613552565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b610a8161364c565b46615aff1480610a92575046615afe145b15610ac457610a9f613679565b610ac45760405162461bcd60e51b8152600401610abb90614f36565b60405180910390fd5b6103e8811115610b0e5760405162461bcd60e51b81526020600482015260156024820152744665652063616e6e6f74206578636565642031302560581b6044820152606401610abb565b600f55565b610b1b6136f3565b46615aff1480610b2c575046615afe145b15610b5557610b39613679565b610b555760405162461bcd60e51b8152600401610abb90614f36565b6000838152600860205260409020600101546001600160a01b03163314610bb45760405162461bcd60e51b81526020600482015260136024820152722737ba10383937b23ab1ba1031b932b0ba37b960691b6044820152606401610abb565b80610bf85760405162461bcd60e51b815260206004820152601460248201527313995dc8105412481ad95e481c995c5d5a5c995960621b6044820152606401610abb565b60008381526008602081905260409091200154610c1690838361371d565b610c206001600055565b505050565b610c2d6136f3565b46615aff1480610c3e575046615afe145b15610c6757610c4b613679565b610c675760405162461bcd60e51b8152600401610abb90614f36565b600654811115610c895760405162461bcd60e51b8152600401610abb90614f62565b60008181526008602052604090206006015460ff16610cba5760405162461bcd60e51b8152600401610abb90614f8b565b6000818152600860205260408120600a01805491610cd783614fcd565b9091555050604051339082907f0ce44972849d4d674b57bb7d2a1078a3aa2f67d0a48971a4a79b9a578594b59490600090a3610d136001600055565b50565b6000818152601560205260409020805460609190610d3390614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5f90614fe6565b80156109e95780601f10610d81576101008083540402835291602001916109e9565b820191906000526020600020905b815481529060010190602001808311610d8f5750939695505050505050565b610db661445c565b6007548211158015610dc85750600082115b610de45760405162461bcd60e51b8152600401610abb9061501a565b6000828152600960209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610e2f90614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5b90614fe6565b8015610ea85780601f10610e7d57610100808354040283529160200191610ea8565b820191906000526020600020905b815481529060010190602001808311610e8b57829003601f168201915b50505050508152602001600382018054610ec190614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054610eed90614fe6565b8015610f3a5780601f10610f0f57610100808354040283529160200191610f3a565b820191906000526020600020905b815481529060010190602001808311610f1d57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611014578382906000526020600020018054610f8790614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb390614fe6565b80156110005780601f10610fd557610100808354040283529160200191611000565b820191906000526020600020905b815481529060010190602001808311610fe357829003601f168201915b505050505081526020019060010190610f68565b50505050815260200160058201805461102c90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461105890614fe6565b80156110a55780601f1061107a576101008083540402835291602001916110a5565b820191906000526020600020905b81548152906001019060200180831161108857829003601f168201915b505050918352505060068201546020820152600782015460ff16151560408201526008820154606082015260098201546080820152600a9091015460a09091015292915050565b6110f46136f3565b46615aff1480611105575046615afe145b1561112e57611112613679565b61112e5760405162461bcd60e51b8152600401610abb90614f36565b6000818152600860205260409020600681015460ff166111605760405162461bcd60e51b8152600401610abb90614f8b565b80600401543410156111ab5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610abb565b6001810154336001600160a01b03909116036112095760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74207075726368617365206f776e2070726f6475637400000000006044820152606401610abb565b60068101805460ff19169055600f5460048201546000916127109161122e9190615044565b6112389190615071565b9050600081836004015461124c9190615085565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611289573d6000803e3d6000fd5b5082600401543411156112d557600483015433906108fc906112ab9034615085565b6040518115909202916000818181858888f193505050501580156112d3573d6000803e3d6000fd5b505b600183015460048401546040519081526001600160a01b0390911690339086907f89a8790373694cb8e6f5112d59a2e66f88c2be837274055780f8910dab3e695c9060200160405180910390a4505050610d136001600055565b6113376136f3565b46615aff1480611348575046615afe145b1561137157611355613679565b6113715760405162461bcd60e51b8152600401610abb90614f36565b6006548111156113935760405162461bcd60e51b8152600401610abb90614f62565b600034116113d45760405162461bcd60e51b815260206004820152600e60248201526d04d757374207374616b65203e20360941b6044820152606401610abb565b60008181526008602052604090206006015460ff166114055760405162461bcd60e51b8152600401610abb90614f8b565b6000818152600c602090815260408083203384529091528120805434929061142e908490615098565b909155505060008181526008602052604081206009018054349290611454908490615098565b9091555050604051348152339082907fc1d3c31619aec7561f6fa519052617aed252a25edaddc5d7428681180516837a9060200160405180910390a3610d136001600055565b601560205260009081526040902080546114b390614fe6565b80601f01602080910402602001604051908101604052809291908181526020018280546114df90614fe6565b801561152c5780601f106115015761010080835404028352916020019161152c565b820191906000526020600020905b81548152906001019060200180831161150f57829003601f168201915b505050505081565b60096020526000908152604090208054600182015460028301805492936001600160a01b039092169261156690614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461159290614fe6565b80156115df5780601f106115b4576101008083540402835291602001916115df565b820191906000526020600020905b8154815290600101906020018083116115c257829003601f168201915b5050505050908060030180546115f490614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461162090614fe6565b801561166d5780601f106116425761010080835404028352916020019161166d565b820191906000526020600020905b81548152906001019060200180831161165057829003601f168201915b50505050509080600501805461168290614fe6565b80601f01602080910402602001604051908101604052809291908181526020018280546116ae90614fe6565b80156116fb5780601f106116d0576101008083540402835291602001916116fb565b820191906000526020600020905b8154815290600101906020018083116116de57829003601f168201915b5050506006840154600785015460088601546009870154600a909701549596929560ff909216945092508a565b601280546114b390614fe6565b61173d61364c565b6117476000613846565b565b600b602052816000526040600020818154811061176557600080fd5b90600052602060002001600091509150505481565b6117826136f3565b46615aff1480611793575046615afe145b156117bc576117a0613679565b6117bc5760405162461bcd60e51b8152600401610abb90614f36565b60008651116118045760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610abb565b600084116118545760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606401610abb565b806118945760405162461bcd60e51b815260206004820152601060248201526f105412481ad95e481c995c5d5a5c995960821b6044820152606401610abb565b600680549060006118a483614fcd565b90915550506006546040516bffffffffffffffffffffffff193360601b16602082015260348101919091526000906054016040516020818303038152906040528051906020012090506118f881848461371d565b60408051610160810182526006548082523360208084019182528385018c8152606085018c9052608085018b905260a085018a9052600160c086018190524260e0870152610100860188905260006101208701819052610140870181905294855260089092529490922083518155905191810180546001600160a01b0319166001600160a01b03909316929092179091559151909190600282019061199d90826150f1565b50606082015160038201906119b290826150f1565b506080820151600482015560a082015160058201906119d190826150f1565b5060c08201516006828101805460ff19169215159290921790915560e083015160078301556101008301516008830155610120830151600983015561014090920151600a9182015533600081815260209283526040808220855481546001810183559184529490922090910192909255915490517fc70903744648ba62771a2d2410274bf061b52210ea366530dd5bca16536c491e90611a76908b908a908a906151b0565b60405180910390a350611a896001600055565b505050505050565b6000611a9b6136f3565b46615aff1480611aac575046615afe145b15611ad557611ab9613679565b611ad55760405162461bcd60e51b8152600401610abb90614f36565b600654831115611af75760405162461bcd60e51b8152600401610abb90614f62565b6000838152600c60209081526040808320338452909152902054611b5d5760405162461bcd60e51b815260206004820152601760248201527f4d757374207374616b6520746f20757365206d6f64656c0000000000000000006044820152606401610abb565b600060128054611b6c90614fe6565b905011611bbb5760405162461bcd60e51b815260206004820152601f60248201527f436861696e6c696e6b20736f75726365206e6f7420636f6e66696775726564006044820152606401610abb565b601054611c0a5760405162461bcd60e51b815260206004820152601c60248201527f436861696e6c696e6b20444f4e206e6f7420636f6e66696775726564000000006044820152606401610abb565b60008381526008602090815260408083208151610160810183528154815260018201546001600160a01b0316938101939093526002810180549192840191611c5190614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7d90614fe6565b8015611cca5780601f10611c9f57610100808354040283529160200191611cca565b820191906000526020600020905b815481529060010190602001808311611cad57829003601f168201915b50505050508152602001600382018054611ce390614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0f90614fe6565b8015611d5c5780601f10611d3157610100808354040283529160200191611d5c565b820191906000526020600020905b815481529060010190602001808311611d3f57829003601f168201915b5050505050815260200160048201548152602001600582018054611d7f90614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054611dab90614fe6565b8015611df85780601f10611dcd57610100808354040283529160200191611df8565b820191906000526020600020905b815481529060010190602001808311611ddb57829003601f168201915b5050509183525050600682015460ff1615156020820152600782015460408201526008820154606082015260098201546080820152600a9091015460a09091015260c0810151909150611e5d5760405162461bcd60e51b8152600401610abb90614f8b565b6000611e6d826101000151613898565b90506000815111611eb45760405162461bcd60e51b8152602060048201526011602482015270105412481ad95e481b9bdd08199bdd5b99607a1b6044820152606401610abb565b611ef56040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b611f9260128054611f0590614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3190614fe6565b8015611f7e5780601f10611f5357610100808354040283529160200191611f7e565b820191906000526020600020905b815481529060010190602001808311611f6157829003601f168201915b505050505082613a1b90919063ffffffff16565b60408051600380825260808201909252600091816020015b6060815260200190600190039081611faa5790505090508581600081518110611fd557611fd56151e5565b60200260200101819052508281600181518110611ff457611ff46151e5565b6020026020010181905250836040015181600281518110612017576120176151e5565b602090810291909101015261202c8282613a28565b61205c61203883613a52565b6011546010546001600160401b03821691600160401b900463ffffffff1690613d2a565b60008181526013602090815260408083208b90556014825280832080546001600160a01b031916331790558a8352601690915281208054929750906120a083614fcd565b919050555084336001600160a01b0316887f6b48e2000b5db59ba6665037aff7344369c1a5f08eb36faffab68a4f36d39843896040516120e0919061484e565b60405180910390a4505050506120f66001600055565b92915050565b60086020526000908152604090208054600182015460028301805492936001600160a01b039092169261212e90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461215a90614fe6565b80156121a75780601f1061217c576101008083540402835291602001916121a7565b820191906000526020600020905b81548152906001019060200180831161218a57829003601f168201915b5050505050908060030180546121bc90614fe6565b80601f01602080910402602001604051908101604052809291908181526020018280546121e890614fe6565b80156122355780601f1061220a57610100808354040283529160200191612235565b820191906000526020600020905b81548152906001019060200180831161221857829003601f168201915b50505050509080600401549080600501805461225090614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461227c90614fe6565b80156122c95780601f1061229e576101008083540402835291602001916122c9565b820191906000526020600020905b8154815290600101906020018083116122ac57829003601f168201915b5050506006840154600785015460088601546009870154600a90970154959660ff9093169591945092508b565b6122fe6136f3565b46615aff148061230f575046615afe145b156123385761231c613679565b6123385760405162461bcd60e51b8152600401610abb90614f36565b60008751116123805760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606401610abb565b816123c05760405162461bcd60e51b815260206004820152601060248201526f105412481ad95e481c995c5d5a5c995960821b6044820152606401610abb565b600780549060006123d083614fcd565b90915550506007546040516bffffffffffffffffffffffff193360601b1660208201526034810191909152641859d95b9d60da1b605482015260009060590160405160208183030381529060405280519060200120905061243281858561371d565b60408051610160810182526007548082523360208084019182528385018d8152606085018d9052608085018c905260a085018b9052600060c0860181905288151560e087015242610100870152610120860188905261014086018190529384526009909152939091208251815590516001820180546001600160a01b0319166001600160a01b03909216919091179055915190919060028201906124d690826150f1565b50606082015160038201906124eb90826150f1565b50608082015180516125079160048401916020909101906144c4565b5060a0820151600582019061251c90826150f1565b5060c0820151600682015560e08201516007808301805460ff1916921515929092179091556101008301516008830155610120830151600983015561014090920151600a90910155336000818152600b60209081526040808320945485546001810187559584529190922090930192909255905161259b908a906151fb565b60405190819003812060075490917fa2bad51fd096fded505c462668af1424620df54cefdffc9ef304df0f2883c59c90600090a4506125da6001600055565b50505050505050565b6125eb6136f3565b46615aff14806125fc575046615afe145b1561262557612609613679565b6126255760405162461bcd60e51b8152600401610abb90614f36565b60075481111580156126375750600081115b6126535760405162461bcd60e51b8152600401610abb9061501a565b6000818152600960205260408120600a0180549161267083614fcd565b9091555050604051339082907fab4596ecda2c1e630c4e57f42b75192dc75adf039ad8b82c9f1b828e1c20ca0b90600090a3610d136001600055565b606060006007546001600160401b038111156126ca576126ca61464a565b60405190808252806020026020018201604052801561270357816020015b6126f061445c565b8152602001906001900390816126e85790505b50905060015b6007548111612a4e576000818152600960209081526040918290208251610160810184528154815260018201546001600160a01b031692810192909252600281018054929391929184019161275d90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461278990614fe6565b80156127d65780601f106127ab576101008083540402835291602001916127d6565b820191906000526020600020905b8154815290600101906020018083116127b957829003601f168201915b505050505081526020016003820180546127ef90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461281b90614fe6565b80156128685780601f1061283d57610100808354040283529160200191612868565b820191906000526020600020905b81548152906001019060200180831161284b57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156129425783829060005260206000200180546128b590614fe6565b80601f01602080910402602001604051908101604052809291908181526020018280546128e190614fe6565b801561292e5780601f106129035761010080835404028352916020019161292e565b820191906000526020600020905b81548152906001019060200180831161291157829003601f168201915b505050505081526020019060010190612896565b50505050815260200160058201805461295a90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461298690614fe6565b80156129d35780601f106129a8576101008083540402835291602001916129d3565b820191906000526020600020905b8154815290600101906020018083116129b657829003601f168201915b505050918352505060068201546020820152600782015460ff16151560408201526008820154606082015260098201546080820152600a9091015460a09091015282612a20600184615085565b81518110612a3057612a306151e5565b60200260200101819052508080612a4690614fcd565b915050612709565b50919050565b612a5c6136f3565b46615aff1480612a6d575046615afe145b15612a9657612a7a613679565b612a965760405162461bcd60e51b8152600401610abb90614f36565b6007548111158015612aa85750600081115b612ac45760405162461bcd60e51b8152600401610abb9061501a565b662386f26fc10000341015612b1b5760405162461bcd60e51b815260206004820152601960248201527f4d696e696d756d207374616b6520697320302e303120455448000000000000006044820152606401610abb565b6000818152600960209081526040808320600d83528184203385529092528220805491923492612b4c908490615098565b9250508190555034816006016000828254612b679190615098565b9091555050600781015460ff1615612bc8576000828152600e60209081526040808320338085529252808320805460ff1916600117905551909184917f48144d4763fa1eeb3508e5d5100ca39311a3e830b945722f3ad526a1f112b57f9190a35b6000612710600f5434612bdb9190615044565b612be59190615071565b90506000612bf38234615085565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612c30573d6000803e3d6000fd5b50604051348152339085907feb3ecb29b8b6c9143bbf9f20e05651de6ca9d3c7f798c84b6d770f939755532f9060200160405180910390a3505050610d136001600055565b600a602052816000526040600020818154811061176557600080fd5b612c9961364c565b60108490556011805467ffffffffffffffff19166001600160401b0385161790556012612cc7828483615217565b5050505050565b612cd66136f3565b6007548211158015612ce85750600082115b612d045760405162461bcd60e51b8152600401610abb9061501a565b6000828152600960205260409020600101546001600160a01b03163314612d6d5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c792063726561746f722063616e206772616e74206163636573730000006044820152606401610abb565b60008281526009602052604090206007015460ff16612dc55760405162461bcd60e51b81526020600482015260146024820152734167656e74206973206e6f74207072697661746560601b6044820152606401610abb565b6000828152600e602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551909184917f48144d4763fa1eeb3508e5d5100ca39311a3e830b945722f3ad526a1f112b57f9190a3612e266001600055565b5050565b612e956040518061016001604052806000815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160608152602001600015158152602001600081526020016000801916815260200160008152602001600081525090565b6000828152600860209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191612ee090614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054612f0c90614fe6565b8015612f595780601f10612f2e57610100808354040283529160200191612f59565b820191906000526020600020905b815481529060010190602001808311612f3c57829003601f168201915b50505050508152602001600382018054612f7290614fe6565b80601f0160208091040260200160405190810160405280929190818152602001828054612f9e90614fe6565b8015612feb5780601f10612fc057610100808354040283529160200191612feb565b820191906000526020600020905b815481529060010190602001808311612fce57829003601f168201915b505050505081526020016004820154815260200160058201805461300e90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461303a90614fe6565b80156130875780601f1061305c57610100808354040283529160200191613087565b820191906000526020600020905b81548152906001019060200180831161306a57829003601f168201915b5050509183525050600682015460ff1615156020820152600782015460408201526008820154606082015260098201546080820152600a9091015460a09091015292915050565b60008281526009602090815260408083208151610160810183528154815260018201546001600160a01b0316938101939093526002810180548594938401919061311790614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461314390614fe6565b80156131905780601f1061316557610100808354040283529160200191613190565b820191906000526020600020905b81548152906001019060200180831161317357829003601f168201915b505050505081526020016003820180546131a990614fe6565b80601f01602080910402602001604051908101604052809291908181526020018280546131d590614fe6565b80156132225780601f106131f757610100808354040283529160200191613222565b820191906000526020600020905b81548152906001019060200180831161320557829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156132fc57838290600052602060002001805461326f90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461329b90614fe6565b80156132e85780601f106132bd576101008083540402835291602001916132e8565b820191906000526020600020905b8154815290600101906020018083116132cb57829003601f168201915b505050505081526020019060010190613250565b50505050815260200160058201805461331490614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461334090614fe6565b801561338d5780601f106133625761010080835404028352916020019161338d565b820191906000526020600020905b81548152906001019060200180831161337057829003601f168201915b505050918352505060068201546020820152600782015460ff16151560408201526008820154606082015260098201546080820152600a9091015460a09091015260e08101519091506133e45760019150506120f6565b6000848152600e602090815260408083206001600160a01b038716845290915290205460ff168061342a5750826001600160a01b031681602001516001600160a01b0316145b949350505050565b61343a61364c565b46615aff148061344b575046615afe145b1561347457613458613679565b6134745760405162461bcd60e51b8152600401610abb90614f36565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610d13573d6000803e3d6000fd5b6001600160a01b0381166000908152600b60209081526040918290208054835181840281018401909452808452606093928301828280156109e957602002820191906000526020600020908154815260200190600101908083116109d55750505050509050919050565b61351f61364c565b6001600160a01b03811661354957604051631e4fbdf760e01b815260006004820152602401610abb565b610d1381613846565b600083815260136020908152604080832054601490925282205490916001600160a01b03909116908290036135be5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606401610abb565b600082815260156020526040902084906135d882826150f1565b5085826001600160a01b0316847ff1e32d30b0100186851e0a938f91dc95b154ced582ed35bb15d880ece0026db584604051613614919061484e565b60405180910390a4505050600092835250506013602090815260408083208390556014909152902080546001600160a01b0319169055565b6001546001600160a01b031633146117475760405163118cdaa760e01b8152336004820152602401610abb565b33600090815260046020526040812054819060ff16806136a857503260009081526004602052604090205460ff165b806136b1575060015b6040805133815282151560208201529192507f0f6a0f5482203131919707994262ffc1a2ac3fbc258968c4a16319baf9c14174910160405180910390a1919050565b60026000540361371657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b806137635760405162461bcd60e51b8152602060048201526016602482015275115b5c1d1e4819185d18481b9bdd08185b1b1bddd95960521b6044820152606401610abb565b60006137a483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613dfc92505050565b60008581526002602052604090209091506137bf82826150f1565b5060008481526003602052604090819020805460ff191660011790555184907f9ef3d9065a47e0443c25a4c9514acf29708068e5bf842b1744bb45df580da1cd9061380d9085815260200190565b60405180910390a260405184907fc8a6e11a371e939581dc38833dfd35024eb9ab9df876dcf7d0c61e66a0e4e35490600090a250505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008181526003602052604090205460609060ff166139035760405162461bcd60e51b815260206004820152602160248201527f4b657920646f6573206e6f7420657869737420696e205445452073746f7261676044820152606560f81b6064820152608401610abb565b6000828152600260205260408120805461391c90614fe6565b80601f016020809104026020016040519081016040528092919081815260200182805461394890614fe6565b80156139955780601f1061396a57610100808354040283529160200191613995565b820191906000526020600020905b81548152906001019060200180831161397857829003601f168201915b5050505050905060006139a782613eba565b60405133815290915084907f7efcd9df40a58831739e4c2e39dda216a1463c8f89f4688489f8518ffa1c8a8d9060200160405180910390a260405133815284907fb26b0efcc65d812ba749411a73872f73e0540b79b87dc264a53bbc0bd73ad3889060200160405180910390a29392505050565b612e268260008084613f71565b8051600003613a4a5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000613a61610100613fef565b9050613a9a6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261401090919063ffffffff16565b8251613ab8906002811115613ab157613ab16152d6565b8290614029565b6040805180820190915260088152676c616e677561676560c01b6020820152613ae2908290614010565b6040830151613af9908015613ab157613ab16152d6565b604080518082019091526006815265736f7572636560d01b6020820152613b21908290614010565b6060830151613b31908290614010565b60a08301515115613bc5576040805180820190915260048152636172677360e01b6020820152613b62908290614010565b613b6b81614062565b60005b8360a0015151811015613bbb57613bab8460a001518281518110613b9457613b946151e5565b60200260200101518361401090919063ffffffff16565b613bb481614fcd565b9050613b6e565b50613bc581614086565b60808301515115613c8957600083602001516002811115613be857613be86152d6565b03613c065760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152613c37908290614010565b613c5083602001516002811115613ab157613ab16152d6565b6040805180820190915260078152667365637265747360c81b6020820152613c79908290614010565b6080830151613c899082906140a4565b60c08301515115613d225760408051808201909152600981526862797465734172677360b81b6020820152613cbf908290614010565b613cc881614062565b60005b8360c0015151811015613d1857613d088460c001518281518110613cf157613cf16151e5565b6020026020010151836140a490919063ffffffff16565b613d1181614fcd565b9050613ccb565b50613d2281614086565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401613d829594939291906152ec565b6020604051808303816000875af1158015613da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dc59190615335565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6060600082516001600160401b03811115613e1957613e1961464a565b6040519080825280601f01601f191660200182016040528015613e43576020820181803683370190505b50905060005b8351811015613eb357838181518110613e6457613e646151e5565b602001015160f81c60f81b60f81c60aa1860f81b828281518110613e8a57613e8a6151e5565b60200101906001600160f81b031916908160001a90535080613eab81614fcd565b915050613e49565b5092915050565b6060600082516001600160401b03811115613ed757613ed761464a565b6040519080825280601f01601f191660200182016040528015613f01576020820181803683370190505b50905060005b8351811015613eb357838181518110613f2257613f226151e5565b602001015160f81c60f81b60f81c60aa1860f81b828281518110613f4857613f486151e5565b60200101906001600160f81b031916908160001a90535080613f6981614fcd565b915050613f07565b8051600003613f93576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115613fa657613fa66152d6565b90816002811115613fb957613fb96152d6565b90525060408401828015613fcf57613fcf6152d6565b90818015613fdf57613fdf6152d6565b9052506060909301929092525050565b613ff761451a565b805161400390836140b1565b5060006020820152919050565b61401d8260038351614128565b8151610c209082614247565b81516140369060c261426f565b50612e26828260405160200161404e91815260200190565b6040516020818303038152906040526140a4565b61406d8160046142d8565b6001816020018181516140809190615098565b90525050565b6140918160076142d8565b6001816020018181516140809190615085565b61401d8260028351614128565b6040805180820190915260608152600060208201526140d160208361534e565b156140f9576140e160208361534e565b6140ec906020615085565b6140f69083615098565b91505b60208084018390526040518085526000815290818401018181101561411d57600080fd5b604052509192915050565b6017816001600160401b03161161415457825161414e9060e0600585901b16831761426f565b50505050565b60ff816001600160401b03161161419457825161417c906018611fe0600586901b161761426f565b50825161414e906001600160401b03831660016142ef565b61ffff816001600160401b0316116141d55782516141bd906019611fe0600586901b161761426f565b50825161414e906001600160401b03831660026142ef565b63ffffffff816001600160401b03161161421857825161420090601a611fe0600586901b161761426f565b50825161414e906001600160401b03831660046142ef565b825161422f90601b611fe0600586901b161761426f565b50825161414e906001600160401b03831660086142ef565b60408051808201909152606081526000602082015261426883838451614374565b9392505050565b6040805180820190915260608152600060208201528251516000614294826001615098565b9050846020015182106142b5576142b5856142b0836002615044565b614445565b84516020838201018581535080518211156142ce578181525b5093949350505050565b8151610c2090601f611fe0600585901b161761426f565b60408051808201909152606081526000602082015283515160006143138285615098565b9050856020015181111561433057614330866142b0836002615044565b6000600161434086610100615446565b61434a9190615085565b90508651828101878319825116178152508051831115614368578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561439757600080fd5b83515160006143a68483615098565b905085602001518111156143c3576143c3866142b0836002615044565b8551805183820160200191600091808511156143dd578482525b505050602086015b6020861061441d57805182526143fc602083615098565b9150614409602082615098565b9050614416602087615085565b95506143e5565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b815161445183836140b1565b5061414e8382614247565b6040518061016001604052806000815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160608152602001600081526020016000151581526020016000815260200160008019168152602001600081525090565b82805482825590600052602060002090810192821561450a579160200282015b8281111561450a57825182906144fa90826150f1565b50916020019190600101906144e4565b5061451692915061454f565b5090565b6040518060400160405280614542604051806040016040528060608152602001600081525090565b8152602001600081525090565b80821115614516576000614563828261456c565b5060010161454f565b50805461457890614fe6565b6000825580601f10614588575050565b601f016020900490600052602060002090810190610d1391905b8082111561451657600081556001016145a2565b6000602082840312156145c857600080fd5b5035919050565b80356001600160a01b03811681146145e657600080fd5b919050565b6000602082840312156145fd57600080fd5b614268826145cf565b6020808252825182820181905260009190848201906040850190845b8181101561463e57835183529284019291840191600101614622565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156146885761468861464a565b604052919050565b600082601f8301126146a157600080fd5b81356001600160401b038111156146ba576146ba61464a565b6146cd601f8201601f1916602001614660565b8181528460208386010111156146e257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561471457600080fd5b8335925060208401356001600160401b038082111561473257600080fd5b61473e87838801614690565b9350604086013591508082111561475457600080fd5b5061476186828701614690565b9150509250925092565b60008083601f84011261477d57600080fd5b5081356001600160401b0381111561479457600080fd5b6020830191508360208285010111156147ac57600080fd5b9250929050565b6000806000604084860312156147c857600080fd5b8335925060208401356001600160401b038111156147e557600080fd5b6147f18682870161476b565b9497909650939450505050565b60005b83811015614819578181015183820152602001614801565b50506000910152565b6000815180845261483a8160208601602086016147fe565b601f01601f19169290920160200192915050565b6020815260006142686020830184614822565b6000815180845260208085019450848260051b860182860160005b858110156148a6578383038952614894838351614822565b9885019892509084019060010161487c565b5090979650505050505050565b60006101608251845260208301516148d660208601826001600160a01b03169052565b5060408301518160408601526148ee82860182614822565b915050606083015184820360608601526149088282614822565b915050608083015184820360808601526149228282614861565b91505060a083015184820360a086015261493c8282614822565b91505060c083015160c085015260e083015161495c60e086018215159052565b50610100838101519085015261012080840151908501526101409283015192909301919091525090565b60208152600061426860208301846148b3565b8a81526001600160a01b038a166020820152610140604082018190526000906149c48382018c614822565b905082810360608401526149d8818b614822565b905082810360808401526149ec818a614822565b60a0840198909852505093151560c085015260e08401929092526101008301526101209091015295945050505050565b60008060408385031215614a2f57600080fd5b614a38836145cf565b946020939093013593505050565b60008060008060008060a08789031215614a5f57600080fd5b86356001600160401b0380821115614a7657600080fd5b614a828a838b01614690565b97506020890135915080821115614a9857600080fd5b614aa48a838b01614690565b9650604089013595506060890135915080821115614ac157600080fd5b614acd8a838b01614690565b94506080890135915080821115614ae357600080fd5b50614af089828a0161476b565b979a9699509497509295939492505050565b60008060408385031215614b1557600080fd5b8235915060208301356001600160401b03811115614b3257600080fd5b614b3e85828601614690565b9150509250929050565b8b81526001600160a01b038b16602082015261016060408201819052600090614b738382018d614822565b90508281036060840152614b87818c614822565b905089608084015282810360a0840152614ba1818a614822565b97151560c0840152505060e0810194909452610100840192909252610120830152610140909101529695505050505050565b600082601f830112614be457600080fd5b813560206001600160401b0380831115614c0057614c0061464a565b8260051b614c0f838201614660565b9384528581018301938381019088861115614c2957600080fd5b84880192505b85831015614c6557823584811115614c475760008081fd5b614c558a87838c0101614690565b8352509184019190840190614c2f565b98975050505050505050565b803580151581146145e657600080fd5b600080600080600080600060c0888a031215614c9c57600080fd5b87356001600160401b0380821115614cb357600080fd5b614cbf8b838c01614690565b985060208a0135915080821115614cd557600080fd5b614ce18b838c01614690565b975060408a0135915080821115614cf757600080fd5b614d038b838c01614bd3565b965060608a0135915080821115614d1957600080fd5b614d258b838c01614690565b955060808a0135915080821115614d3b57600080fd5b50614d488a828b0161476b565b9094509250614d5b905060a08901614c71565b905092959891949750929550565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614dbe57603f19888603018452614dac8583516148b3565b94509285019290850190600101614d90565b5092979650505050505050565b60008060408385031215614dde57600080fd5b82359150614dee602084016145cf565b90509250929050565b60008060008060608587031215614e0d57600080fd5b8435935060208501356001600160401b038082168214614e2c57600080fd5b90935060408601359080821115614e4257600080fd5b50614e4f8782880161476b565b95989497509550505050565b602081528151602082015260006020830151614e8260408401826001600160a01b03169052565b506040830151610160806060850152614e9f610180850183614822565b91506060850151601f1980868503016080870152614ebd8483614822565b9350608087015160a087015260a08701519150808685030160c087015250614ee58382614822565b92505060c0850151614efb60e086018215159052565b5060e0850151610100858101919091528501516101208086019190915285015161014080860191909152909401519390920192909252919050565b6020808252601290820152714e6f7420617574686f72697a65642054454560701b604082015260600190565b6020808252600f908201526e125b9d985b1a59081c1c9bd91d58dd608a1b604082015260600190565b60208082526012908201527150726f64756374206e6f742061637469766560701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060018201614fdf57614fdf614fb7565b5060010190565b600181811c90821680614ffa57607f821691505b602082108103612a4e57634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081859d95b9d08125160821b604082015260600190565b80820281158282048414176120f6576120f6614fb7565b634e487b7160e01b600052601260045260246000fd5b6000826150805761508061505b565b500490565b818103818111156120f6576120f6614fb7565b808201808211156120f6576120f6614fb7565b601f821115610c2057600081815260208120601f850160051c810160208610156150d25750805b601f850160051c820191505b81811015611a89578281556001016150de565b81516001600160401b0381111561510a5761510a61464a565b61511e816151188454614fe6565b846150ab565b602080601f831160018114615153576000841561513b5750858301515b600019600386901b1c1916600185901b178555611a89565b600085815260208120601f198616915b8281101561518257888601518255948401946001909101908401615163565b50858210156151a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006151c36060830186614822565b84602084015282810360408401526151db8185614822565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000825161520d8184602087016147fe565b9190910192915050565b6001600160401b0383111561522e5761522e61464a565b6152428361523c8354614fe6565b836150ab565b6000601f841160018114615276576000851561525e5750838201355b600019600387901b1c1916600186901b178355612cc7565b600083815260209020601f19861690835b828110156152a75786850135825560209485019460019092019101615287565b50868210156152c45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038616815260a06020820152600061530e60a0830187614822565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60006020828403121561534757600080fd5b5051919050565b60008261535d5761535d61505b565b500690565b600181815b8085111561539d57816000190482111561538357615383614fb7565b8085161561539057918102915b93841c9390800290615367565b509250929050565b6000826153b4575060016120f6565b816153c1575060006120f6565b81600181146153d757600281146153e1576153fd565b60019150506120f6565b60ff8411156153f2576153f2614fb7565b50506001821b6120f6565b5060208310610133831016604e8410600b8410161715615420575081810a6120f6565b61542a8383615362565b806000190482111561543e5761543e614fb7565b029392505050565b600061426883836153a556fea2646970667358221220c01d3dfa2d81148b2090a507fbe8c4aa373c526b6542e14f020dd0180d0c46c064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Inherits from ReentrancyGuard, Ownable, MockSapphire, and FunctionsClient",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createAgent(string,string,string[],string,bytes,bool)": {
        "details": "Creates a new agent with TEE-protected API key storage",
        "params": {
          "description": "Detailed description of functionality",
          "encryptedApiKey": "Encrypted API key for agent access (stored in TEE)",
          "ipfsHash": "IPFS hash for agent metadata/files",
          "isPrivate": "Whether the agent requires access control",
          "name": "Human-readable name of the AI agent/service",
          "tags": "Array of searchable tags for the agent"
        }
      },
      "getAgent(uint256)": {
        "params": {
          "agentId": "ID of the agent to retrieve"
        },
        "returns": {
          "_0": "Agent struct with all agent data"
        }
      },
      "getAllAgents()": {
        "returns": {
          "_0": "Array of all agent structs"
        }
      },
      "grantAgentAccess(uint256,address)": {
        "params": {
          "agentId": "ID of the agent",
          "user": "Address to grant access to"
        }
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "hasAgentAccess(uint256,address)": {
        "params": {
          "agentId": "ID of the agent",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "bool whether user has access"
        }
      },
      "listProduct(string,string,uint256,string,bytes)": {
        "custom:gasless": "Supports gasless execution via ERC-4337 + Biconomy",
        "custom:security": "TEE-protected API key storage via Oasis ROFL-Sapphire",
        "details": "Creates a new product with TEE-protected API key storage",
        "params": {
          "_category": "Type of AI service (AI Agent, MCP, Copy Trading Bot)",
          "_description": "Detailed description of functionality ",
          "_encryptedApiKey": "Encrypted API key for model access (stored in TEE)  Requirements: - Name must not be empty - Price must be greater than 0 - API key must be provided - Must pass ROFL authorization on Sapphire networks  Emits: - ProductListed event with product details ",
          "_name": "Human-readable name of the AI model/service",
          "_price": "Price in wei for using this product"
        }
      },
      "loveAgent(uint256)": {
        "params": {
          "agentId": "ID of the agent to love"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "runModel(uint256,string)": {
        "custom:chainlink": "Uses Chainlink Functions for decentralized execution",
        "custom:gasless": "Supports gasless execution via ERC-4337 + Biconomy",
        "custom:security": "API keys never exposed - decrypted only within TEE",
        "details": "Initiates secure model execution in Chainlink DON with TEE protection",
        "params": {
          "_input": "Input data/prompt for the AI model",
          "_productId": "ID of the product/model to execute"
        },
        "returns": {
          "requestId": "Chainlink Functions request ID for tracking  Requirements: - Product must exist and be active - User must have staked ETH on this product - Chainlink Functions must be configured (DON ID, subscription, source) - Must pass ROFL authorization on Sapphire networks  Process: 1. Validates user stake and product status 2. Retrieves encrypted API key from TEE storage 3. Builds Chainlink Functions request with TEE-decrypted key 4. Sends request to Chainlink DON for execution 5. Returns request ID for result polling  Emits: - ModelExecutionRequested event with execution details "
        }
      },
      "stakeToAgent(uint256)": {
        "params": {
          "agentId": "ID of the agent to stake on"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Marketplace Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createAgent(string,string,string[],string,bytes,bool)": {
        "notice": "Create a new AI agent/service on the marketplace"
      },
      "getAgent(uint256)": {
        "notice": "Get agent information by ID"
      },
      "getAllAgents()": {
        "notice": "Get all agents (paginated for gas efficiency)"
      },
      "grantAgentAccess(uint256,address)": {
        "notice": "Grant access to a private agent (creator only)"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "hasAgentAccess(uint256,address)": {
        "notice": "Check if user has access to a private agent"
      },
      "listProduct(string,string,uint256,string,bytes)": {
        "notice": "List a new AI product/service on the marketplace"
      },
      "loveAgent(uint256)": {
        "notice": "Love an agent (increment love counter)"
      },
      "runModel(uint256,string)": {
        "notice": "Execute AI model with TEE-protected API keys via Chainlink Functions"
      },
      "stakeToAgent(uint256)": {
        "notice": "Stake ETH on an agent (minimum 0.01 ETH)"
      }
    },
    "notice": "Main contract implementing the decentralized AI marketplace",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2302,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5504,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_mockROFLStorage",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5508,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_keyExists",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5512,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_authorizedOrigins",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5670,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "roflStorage",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ROFLStorageInterface)5667_storage"
      },
      {
        "astId": 4015,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "productCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4017,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "agentCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4022,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "products",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Product)4013_storage)"
      },
      {
        "astId": 4027,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "agents",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Agent)3989_storage)"
      },
      {
        "astId": 4032,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "creatorProducts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4037,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "creatorAgents",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4043,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "stakes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4049,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "agentStakes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4055,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "agentAccess",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4061,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "platformFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4066,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "donId",
        "offset": 0,
        "slot": "16",
        "type": "t_bytes32"
      },
      {
        "astId": 4068,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint64"
      },
      {
        "astId": 4071,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "gasLimit",
        "offset": 8,
        "slot": "17",
        "type": "t_uint32"
      },
      {
        "astId": 4073,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "source",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 4077,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "requestToProductId",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4081,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "requestToUser",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4085,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "productLastResult",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4089,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "productExecutionCount",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Agent)3989_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Agent)",
        "numberOfBytes": "32",
        "value": "t_struct(Agent)3989_storage"
      },
      "t_mapping(t_uint256,t_struct(Product)4013_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)4013_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agent)3989_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Agent",
        "members": [
          {
            "astId": 3967,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3969,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3971,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3973,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3976,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tags",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3978,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3980,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "totalStake",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3982,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "isPrivate",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 3984,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "createdAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3986,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "apiKeyHash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          },
          {
            "astId": 3988,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "loves",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Product)4013_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Product",
        "members": [
          {
            "astId": 3992,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3994,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3996,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3998,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4000,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4002,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "category",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4004,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4006,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4008,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "apiKeyHash",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 4010,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "totalStaked",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4012,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "loves",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ROFLStorageInterface)5667_storage": {
        "encoding": "inplace",
        "label": "struct MockSapphire.ROFLStorageInterface",
        "members": [
          {
            "astId": 5666,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}